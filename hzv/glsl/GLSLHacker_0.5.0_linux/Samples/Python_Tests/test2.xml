<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>

	
<window name="win3d01" title="Python test" 
          width="700" height="400" 
          gl_version_major="2" gl_version_minor="1" />



          
  <gpu_program name="gpu_prog_01" >
    <raw_data_vs><![CDATA[	 
void main()
{
  gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		
  gl_TexCoord[0] = gl_MultiTexCoord0;
}
  ]]></raw_data_vs>
    <raw_data_ps><![CDATA[	 
uniform sampler2D tex0;
void main (void)
{
  vec2 uv = gl_TexCoord[0].xy;
  uv.y *= -1.0;
  vec3 t = texture2D(tex0,uv).rgb;
  gl_FragColor = vec4(t, 1.0) * 0.5;
}
    ]]></raw_data_ps>
  </gpu_program>

          
  

  
  
  
      
<script name="init_scene" run_mode="INIT" language="PYTHON" >
		<raw_data><![CDATA[	

import gh_node
import gh_object
import gh_camera
import gh_mesh
import gh_gpu_program
import gh_texture
import gh_utils
import gh_renderer
import gh_window
import sys
import platform



winW, winH = gh_window.getsize(0)

font_a = gh_utils.font_create("Tahoma", 14)
gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)




aspect = 1.333
if (winH > 0):
  aspect = winW / winH
  
camera = gh_camera.create_persp(60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)
gh_camera.setpos(camera, 0, 10, 20)
gh_camera.setlookat(camera, 0, 0, 0)
gh_camera.setupvec(camera, 0, 1, 0, 0)

glsl_prog = gh_node.getid("gpu_prog_01")
gh_gpu_program.bind(glsl_prog)
gh_gpu_program.uniform1i(glsl_prog, "tex0", 0)
gh_gpu_program.bind(0)

mesh_quad = gh_mesh.create_quad(30, 15)
gh_object.use_gl2_vertex_array(mesh_quad, 1) # Old OpenGL...

abs_path = 0
PF_U8_RGBA = 3
tex01 = gh_texture.create_from_file("python_logo.jpg", PF_U8_RGBA, abs_path)

g_frames = 0

gh_renderer.set_depth_test_state(1)
gh_renderer.set_vsync(1)

		]]></raw_data>
</script> 



  
<script name="update_scene" run_mode="FRAME" language="PYTHON" >
		<raw_data><![CDATA[	

elapsed_time = gh_utils.get_elapsed_time()

gh_camera.bind(camera)
gh_renderer.clear_color_buffer(0.2, 0.2, 0.2, 1.0)
gh_texture.bind(tex01, 0)
gh_gpu_program.bind(glsl_prog)
gh_object.set_euler_angles(mesh_quad, 0, elapsed_time*50, 0)
gh_object.render(mesh_quad)
gh_gpu_program.bind(0)

gh_utils.font_render(font_a, 10, 20, 1.0, 1.0, 0.0, 1.0, "GLSL Hacker - Python 2.7 plugin test - Frames: " + str(g_frames))
gh_utils.font_render(font_a, 10, 40, 0.0, 1.0, 0.0, 1.0, "platform.python_version() = " + str(platform.python_version()))
gh_utils.font_render(font_a, 10, 60, 0.0, 1.0, 0.0, 1.0, "platform.system() = " + str(platform.system()))
gh_utils.font_render(font_a, 10, 80, 0.0, 1.0, 0.0, 1.0, "platform.node() = " + str(platform.node()))
gh_utils.font_render(font_a, 10, 100, 0.0, 1.0, 0.0, 1.0, "platform.version() = " + str(platform.version()))
gh_utils.font_render(font_a, 10, 120, 0.0, 1.0, 0.0, 1.0, "platform.release() = " + str(platform.release()))
gh_utils.font_render(font_a, 10, 140, 0.0, 1.0, 0.0, 1.0, "platform.machine() = " + str(platform.machine()))
gh_utils.font_render(font_a, 10, 160, 0.0, 1.0, 0.0, 1.0, "platform.processor() = " + str(platform.processor()))
gh_utils.font_render(font_a, 10, 180, 0.0, 1.0, 0.0, 1.0, "platform.uname() = " + str(platform.uname()))

g_frames = g_frames+1

		]]></raw_data>
</script> 



<script name="resize_scene" run_mode="SIZE" language="PYTHON" >
		<raw_data><![CDATA[	
winW, winH = gh_window.getsize(0)
gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

aspect = 1.333
if (winH > 0):
  aspect = winW / winH

gh_camera.update_persp(camera, 60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)

		]]></raw_data>
</script> 
  
 

  
</glsl_hacker>
