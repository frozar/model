<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>
	
  <window name="win3d01" title="GLSL Hacker - Tessellation shaders (OpenGL 4.0)" 
          width="800" height="600" 
          gl_version_major="4" gl_version_minor="0" />
  
  <gpu_program name="tess_prog" >
    <raw_data_vs><![CDATA[	 
#version 400 compatibility
in vec4 gxl3d_Position;
uniform mat4 gxl3d_ModelMatrix;

void main()
{
  gl_Position = gxl3d_ModelMatrix * gxl3d_Position;
}
  ]]></raw_data_vs>
  
    <raw_data_tcs><![CDATA[	 
#version 400 compatibility

layout(vertices = 3) out;
uniform float tessLevelOuter;
uniform float tessLevelInner;

void main()
{
  gl_TessLevelOuter[0] = tessLevelOuter;
  gl_TessLevelOuter[1] = tessLevelOuter;
  gl_TessLevelOuter[2] = tessLevelOuter;
  gl_TessLevelInner[0] = tessLevelInner;
  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}
  ]]></raw_data_tcs>
  
  
    <raw_data_tes><![CDATA[	 
#version 400 compatibility
layout(triangles, fractional_even_spacing, ccw) in;
uniform mat4 gxl3d_ViewMatrix;
uniform mat4 gxl3d_ProjectionMatrix;
void main()
{
  float u = gl_TessCoord.x;
  float v = gl_TessCoord.y;
  float w = gl_TessCoord.z;

  vec4 pos = vec4(0);
  pos.xyz += u * gl_in[0].gl_Position.xyz;
  pos.xyz += v * gl_in[1].gl_Position.xyz;
  pos.xyz += w * gl_in[2].gl_Position.xyz;
  pos.w = 1.0;

  mat4 viewProjectionMatrix = gxl3d_ProjectionMatrix * gxl3d_ViewMatrix;
  gl_Position = viewProjectionMatrix * pos;
}
  ]]></raw_data_tes>

  <raw_data_ps><![CDATA[	 
#version 400 compatibility
precision highp float;
out vec4 Out_Color;
void main()
{
  vec3 final_color = vec3(1.0, 0.0, 0.0);
  Out_Color = vec4(final_color.xyz, 1.0);
}
    ]]></raw_data_ps>
  </gpu_program>
  
 
  
	<script name="init_scene" run_mode="INIT" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

font_a = gh_utils.font_create("Tahoma", 14)
gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

camera = gh_camera.create_perspective(0, 10, 20, 0, 0, 0)



mesh_sphere = gh_mesh.create_sphere(10, 10, 10)

GL_ARB_tessellation_shader_ok = gh_renderer.check_opengl_extension("GL_ARB_tessellation_shader")

tess_prog = 0

if (GL_ARB_tessellation_shader_ok == 1) then
  tess_prog = gh_node.getid("tess_prog")
  gh_object.set_tessellation_state(mesh_sphere, 1)
end


gh_renderer.set_vsync(0)
gh_renderer.set_scissor_state(1)
gh_renderer.set_depth_test_state(1)


RENDERER_POLYGON_FACE_BACK = 0
RENDERER_POLYGON_FACE_FRONT = 1
RENDERER_POLYGON_FACE_BACK_FRONT = 2

RENDERER_POLYGON_MODE_POINT = 0
RENDERER_POLYGON_MODE_LINE = 1
RENDERER_POLYGON_MODE_SOLID = 2


		]]></raw_data>
	</script> 

 
	<script name="update_scene" run_mode="FRAME" >
		<raw_data><![CDATA[	

elapsed_time = gh_utils.get_elapsed_time()

gh_camera.bind(camera)

gh_renderer.clear_color_depth_buffers(0.2, 0.2, 0.2, 1.0, 1.0)


gh_renderer.rasterizer_set_polygon_mode(RENDERER_POLYGON_FACE_BACK_FRONT, RENDERER_POLYGON_MODE_LINE)
gh_renderer.rasterizer_apply_states()

if (GL_ARB_tessellation_shader_ok == 1) then
  gh_gpu_program.bind(tess_prog)
  gh_gpu_program.uniform1f(tess_prog, "tessLevelOuter", 4)
  gh_gpu_program.uniform1f(tess_prog, "tessLevelInner", 4)
end

gh_object.set_euler_angles(mesh_sphere, 0, elapsed_time*20, 0)
gh_object.render(mesh_sphere)


gh_renderer.rasterizer_set_polygon_mode(RENDERER_POLYGON_FACE_BACK_FRONT, RENDERER_POLYGON_MODE_SOLID)
gh_renderer.rasterizer_apply_states()


gh_utils.font_render(font_a, 10, 20, 0.2, 1.0, 0.0, 1.0, "GLSL Hacker demo - OpenGL 4.0 Tessellation shaders")
if (GL_ARB_tessellation_shader_ok == 1) then
  gh_utils.font_render(font_a, 10,40, 0.9, 1.0, 0.0, 1.0, "Tessellation shaders supported.")
else
  gh_utils.font_render(font_a, 10,40, 0.9, 1.0, 0.0, 1.0, "Tessellation shaders are NOT supported by your system :(")
end
		]]></raw_data>
	</script> 
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
gh_camera.update_persp(camera, 60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)

gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

		]]></raw_data>
	</script> 
  
  
</glsl_hacker>
