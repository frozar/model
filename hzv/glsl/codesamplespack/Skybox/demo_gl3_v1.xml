<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>
	
  <window name="win3d01" title="Skybox Test" width="800" height="400"
          gl_version_major="3" gl_version_minor="2" />
  
  
<gpu_program name="gpu_prog_01" >
    <raw_data_vs><![CDATA[	 
#version 150
in vec4 gxl3d_Position;
in vec4 gxl3d_TexCoord0;
uniform mat4 gxl3d_ModelViewProjectionMatrix;
out vec4 Vertex_UV;
void main()
{
  gl_Position = gxl3d_ModelViewProjectionMatrix * gxl3d_Position;
  Vertex_UV = gxl3d_TexCoord0;
}
  ]]></raw_data_vs>
    <raw_data_ps><![CDATA[	 
#version 150
uniform sampler2D tex0;
in vec4 Vertex_UV;
out vec4 Out_Color;
void main()
{
  vec2 uv = Vertex_UV.xy;
  uv.y *= -1.0;
  vec3 t = texture(tex0,uv).rgb;
  Out_Color = vec4(t, 1.0);
}
    ]]></raw_data_ps>
  </gpu_program>
  
  
  
	<script name="init_scene" run_mode="INIT" >
		<raw_data><![CDATA[	
    
    
demo_dir = gh_utils.get_scenegraph_dir() 		
gh_utils.trace(demo_dir)
dofile(demo_dir .. "gh_aux_lib_v1.lua")

g_cam_lookat = vec3()
g_cam_lookat:set(0, 0, 0)

    

function GH_InitRandom()
	math.randomseed(os.time()) -- seed and pop
end

function GH_random(a, b)
	if (a > b) then
		local c = b
		b = a
		a = c
	end
	local delta = b-a
	return (a + math.random()*delta)
end

    
winW, winH = gh_window.getsize(0)

font_a = gh_utils.font_create("Tahoma", 14)


local aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
camera = gh_camera.create_persp(60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)
gh_camera.setpos(camera, 0, 2, 40)
gh_camera.setlookat(camera, 0, 0, 0)
gh_camera.setupvec(camera, 0, 1, 0, 0)

GH_InitCameraRotation(camera, g_cam_lookat, 20, 0)


glsl_prog = gh_node.getid("gpu_prog_01")

mesh_plane = gh_mesh.create_plane(50, 50, 10, 10)
local abs_path = 0
tex01 = gh_texture.create_from_file("6422-diffuse.jpg", 0, abs_path)


local PF_U8_RGB = 1
local PF_U8_BGR = 2
local pf = PF_U8_RGB

abs_path = 0
skybox = gh_skybox.create("posx.jpg", "negx.jpg", "posy.jpg", "negy.jpg", "posz.jpg", "negz.jpg", abs_path, pf)
if (skybox > 0) then
  gh_skybox.resize(skybox, winW, winH)
end


gh_renderer.set_vsync(0)
gh_renderer.set_depth_test_state(1)

		]]></raw_data>
	</script> 
  
	<script name="update_scene" run_mode="FRAME" >
		<raw_data><![CDATA[	

elapsed_time = gh_utils.get_elapsed_time()

GH_DoCameraOrbit_v2(camera, g_cam_lookat)
gh_camera.bind(camera)
gh_renderer.clear_color_depth_buffers(0.2, 0.2, 0.2, 1.0, 1.0)

gh_renderer.set_depth_test_state(0)


if (skybox > 0) then
  gh_object.render(skybox)
end

gh_renderer.set_depth_test_state(1)

gh_texture.bind(tex01, 0)
gh_gpu_program.bind(glsl_prog)
gh_object.render(mesh_plane)


gh_utils.font_render(font_a, 10, 20, 0.2, 1.0, 0.0, 1.0, "GLSL Hacker - Skybox test")

		]]></raw_data>
	</script> 
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
gh_camera.update_persp(camera, 60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)

gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

if (skybox > 0) then
  gh_skybox.resize(skybox, winW, winH)
end


		]]></raw_data>
	</script> 
  
  
</glsl_hacker>
