<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>

  <window name="win3d01" title="GLSL Hacker - Raymarching Primitives (OpenGL 2.1)" 
          width="680" height="400" 
          gl_version_major="2" gl_version_minor="1" />


  <gpu_program name="tex_prog" >
    <raw_data_vs><![CDATA[	 
#version 120
uniform mat4 gxl3d_ModelViewProjectionMatrix; // Automatically passed by GLSL Hacker
void main()
{
  gl_Position = gxl3d_ModelViewProjectionMatrix * gl_Vertex;
  gl_TexCoord[0] = gl_MultiTexCoord0;
}
  ]]></raw_data_vs>
    <raw_data_ps><![CDATA[	 
#version 120
uniform sampler2D tex0;
void main()
{
  vec2 uv = gl_TexCoord[0].xy;
  uv.y *= -1.0;
  gl_FragColor.rgb = texture2D(tex0, uv).rgb;
  gl_FragColor.a = 1.0;
}
    ]]></raw_data_ps>
  </gpu_program>

          
<gpu_program name="EffectGpuProgram" >
    <raw_data_vs><![CDATA[	 
#version 120
void main()
{	
	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_Position = ftransform();		
}
  ]]></raw_data_vs>

    <raw_data_ps><![CDATA[	 
#version 120
uniform vec3 cam_pos;
uniform float time;
uniform vec2 resolution;
uniform vec2 mouse;

//Simple raymarching sandbox with camera

//Raymarching Distance Fields
//About http://www.iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm
//Also known as Sphere Tracing

float PI=3.14159265;

vec2 obj_union(in vec2 obj0, in vec2 obj1)
{
  if (obj0.x < obj1.x)
  	return obj0;
  else
  	return obj1;
}

//Floor
vec2 obj_floor(in vec3 p)
{
  return vec2(p.y+10.0,0);
}

// http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm

vec2 obj_sphere(in vec3 p)
{
  float d = length(p)-1.9;
  return vec2(d,1);
}

vec2 obj_torus(in vec3 p)
{
  vec2 r = vec2(2.1,0.5);
  vec2 q = vec2(length(p.xz)-r.x,p.y);
  float d = length(q)-r.y;
  return vec2(d,1);
}


vec2 opTwist( vec3 p )
{
    float c = cos(20.0*p.y);
    float s = sin(20.0*p.y);
    mat2  m = mat2(c,-s,s,c);
    vec3  q = vec3(m*p.xz,p.y);
    return obj_torus(q);
}


float length4(vec2 q)
{
  // This function does not work well on GeForce GTX 460 card...
  // Work fine on Radeon.
  return pow(pow(q.x,4.0) + pow(q.y,4.0), 1.0/4.0);
}

vec2 obj_torus_42(vec3 p)
{
  //vec2 r = vec2(2.1,0.76);
  vec2 r = vec2(2.1,1.5);
  //vec2 q = vec2(length(p.xz)-r.x,p.y); // Horizontal
  vec2 q = vec2(length(p.yz)-r.x,p.x); // Vertical
  float d= length4(q)-r.y;
  return vec2(d,1);
}

vec2 obj_torus_44(vec3 p)
{
  vec2 r = vec2(2.0,0.5);
  vec2 q = vec2(length4(p.xz)-r.x,p.y);
  float d= length4(q)-r.y;
  return vec2(d,1);
}

vec2 obj_round_box(vec3 p)
{
  float d= length(max(abs(p)-vec3(2.0,0.5,2.0),0.0))-0.2;
  //float d= length(max(abs(p)-vec3(1.0,0.129,1.0),0.0))-0.3;
  return vec2(d,1);
}

vec2 op_union(vec2 a, vec2 b)
{
  float d = min(a.x, b.x);
  return vec2(d,1);
}

vec2 op_sub(vec2 a, vec2 b)
{
  float d = max(a.x, -b.x);
  return vec2(d,1);
}

vec2 op_rep(vec3 p, vec3 c)
{
  vec3 q = mod(p,c)-0.5*c;
  return obj_round_box(q);
  //return obj_torus_42(q);
  //return op_blend(q, obj_round_box(q), obj_torus_42(q));
  //return op_rep2(q, vec3(3.00, 3.0, 3.05));
}

vec2 op_blend(vec3 p, vec2 a, vec2 b)
{
 float s = smoothstep(length(p), 0.0, 1.0);
 //float s = smoothstep(0, 1, length(p));
  float d = mix(a.x, b.x, s);
  return vec2(d,1);
}


/*
vec2 op_rep2(vec3 p, vec3 c)
{
  vec3 q = mod(p,c)-0.5*c;
  //return obj_round_box(q);
  //return obj_torus_42(q);
  return op_blend(q, obj_round_box(q), obj_torus_42(q));
}

vec2 displacement( vec3 p )
{
   float d = sin(1.4*p.x)*sin(1.4*p.y)*cos(1.4*p.z);
   return vec2(d, 1.0);
}

vec2 op_displace( vec3 p )
{
    vec2 d1 = obj_torus_42(p);
    vec2 d2 = displacement(p);
    return vec2(d1.x+d2.x, 1);
}
*/




//Floor Color (checkerboard)
vec3 floor_color(in vec3 p)
{
   if (fract(p.x*0.2)>0.2)
  {
     if (fract(p.z*0.2)>0.2)
       return vec3(0,0.1,0.2);
     else
       return vec3(1,1,1);
  }
  else
  {
    if (fract(p.z*.2)>.2)
      return vec3(1,1,1);
    else
      return vec3(0.3,0,0);
   }
}

vec3 floor_color_v2(in vec3 p)
{
   if (fract(p.x*0.2)>0.2)
  {
     if (fract(p.z*0.2)>0.2)
       return vec3(0,0.1,0.2);
     else
       return vec3(1,1,1);
  }
  else
  {
    if (fract(p.z*.2)>.2)
      return vec3(1,1,1);
    else
      return vec3(0.3,0,0);
   }
}


// Primitive color
vec3 prim_c(in vec3 p)
{
  return vec3(0.6,0.6,0.8);
}



//Objects union
vec2 distance_to_obj(in vec3 p)
{
  //return obj_floor(p);
  return obj_union(obj_floor(p), obj_sphere(p));
  //return obj_union(obj_floor(p), obj_torus(p));
  //return obj_union(obj_floor(p), opTwist(p));
  //return obj_union(obj_floor(p), obj_torus_44(p));
  //return obj_union(obj_floor(p), obj_round_box(p));
  //return obj_union(obj_floor(p), op_union(obj_round_box(p), obj_sphere(p)));
  //return obj_union(obj_floor(p), op_union(obj_round_box(p), obj_torus_42(p)));
  //return obj_union(obj_floor(p), op_blend(p, obj_round_box(p), obj_torus(p)));
  //return obj_union(obj_floor(p), op_sub(obj_round_box(p), obj_sphere(p)));
  //return obj_union(obj_floor(p), op_rep(p, vec3(8.0, 8.0, 8.0)));
  //return obj_union(obj_floor(p), op_displace(p));
}

//Scene End

void main(void)
{
  //vec2 vPos=-1.0+2.0*gl_FragCoord.xy/resolution.xy;
  
  vec2 q = gl_TexCoord[0].xy;
  vec2 vPos = -1.0 + 2.0 * q;

  //Camera animation
  vec3 vuv=vec3(0,1,0);//Change camere up vector here
  vec3 vrp=vec3(0,0,0); //Change camere view here
  float mx=mouse.x*PI*2.0;
  float my=mouse.y*PI/2.01;
  //vec3 prp=vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*6.0; //Trackball style camera pos
  vec3 prp = cam_pos;
  

  //Camera setup
  vec3 vpn=normalize(vrp-prp);
  vec3 u=normalize(cross(vuv,vpn));
  vec3 v=cross(vpn,u);
  vec3 vcv=(prp+vpn);
  vec3 scrCoord=vcv+vPos.x*u*resolution.x/resolution.y+vPos.y*v;
  //vec3 scrCoord=vcv+vPos.x*u*0.8+vPos.y*v*0.8;
  vec3 scp=normalize(scrCoord-prp);

  //Raymarching
  const vec3 e=vec3(0.02,0,0);
  const float maxd=100.0; //Max depth
  vec2 d=vec2(0.02,0.0);
  vec3 c,p,n;

  float f=1.0;
  for(int i=0;i<256;i++)
  {
    if ((abs(d.x) < .001) || (f > maxd)) 
      break;
    
    f+=d.x;
    p=prp+scp*f;
    d = distance_to_obj(p);
  }
  
  if (f < maxd)
  {
    if (d.y==0) // y is used to manage materials.
      c=floor_color(p);
    else
      c=prim_c(p);
    
    n=normalize(
      vec3(d.x-distance_to_obj(p-e.xyy).x,
           d.x-distance_to_obj(p-e.yxy).x,
           d.x-distance_to_obj(p-e.yyx).x));
    float b=dot(n,normalize(prp-p));
    gl_FragColor=vec4((b*c+pow(b,60.0))*(1.0-f*.01),1.0);//simple phong LightPosition=CameraPosition
  }
  else 
  {
    gl_FragColor=vec4(0,0,0,1); //background color
  }
}]]></raw_data_ps>
</gpu_program>


	<script name="init_scene" run_mode="INIT"  >
		<raw_data><![CDATA[	
    
demo_dir = gh_utils.get_scenegraph_dir() 		
gh_utils.trace(demo_dir)
dofile(demo_dir .. "gh_aux_lib_v1.lua")
    
winW, winH = gh_window.getsize(0)

font_a = gh_utils.font_create("Tahoma", 14)
gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)
    

g_cam_lookat = vec3()
g_cam_lookat:set(0, 2, 0)

orbit_camera = gh_camera.create_perspective(0, 0, 4, 0, 2, 0)
-- gh_camera.set_position(orbit_camera, 0, 0, 4)
GH_InitCameraRotation(orbit_camera, g_cam_lookat, 20, 20)
    
    
camera_ortho = gh_camera.create_ortho(-winW/2, winW/2, -winH/2, winH/2, 1.0, -1.0)
gh_camera.set_viewport(camera_ortho, 0, 0, winW, winH)
gh_camera.set_position(camera_ortho, 0, 0, 1)
    
mesh_quad = gh_mesh.create_quad(winW, winH)
gh_object.use_gl2_vertex_array(mesh_quad, 1) -- *** Old OpenGL... ***
    
    
gpu_prog = gh_node.getid("EffectGpuProgram")
gh_gpu_program.bind(gpu_prog)
gh_gpu_program.uniform1f(gpu_prog, "resolution", winW, winH)
gh_gpu_program.bind(0)



--[[
tex_prog = gh_node.getid("tex_prog")
gh_gpu_program.bind(tex_prog)
gh_gpu_program.uniform1i(tex_prog, "tex0", 0)
gh_gpu_program.bind(0)
local abs_path = 0
logo_tex = gh_texture.create_from_file("./glslhacker_logo_20130511.jpg", 0, abs_path)
quad_logo  = gh_mesh.create_quad(150, 150)
gh_object.use_old_gl2_rendering(quad_logo, 1)
gh_mesh.set_vertex_color(quad_logo, 0, 1.0, 1.0, 1.0, 0.6)
gh_mesh.set_vertex_color(quad_logo, 3, 1.0, 1.0, 1.0, 0.6)
gh_mesh.set_vertex_color(quad_logo, 1, 1.0, 1.0, 1.0, 0.6)
gh_mesh.set_vertex_color(quad_logo, 2, 1.0, 1.0, 1.0, 0.6)
-- camera_ortho = gh_camera.create_orthographic()

GXL3D_RENDERER_BLEND_FACTOR_ZERO = 0
GXL3D_RENDERER_BLEND_FACTOR_ONE = 1
GXL3D_RENDERER_BLEND_FACTOR_SRC_ALPHA = 2
GXL3D_RENDERER_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 3
GXL3D_RENDERER_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 4
GXL3D_RENDERER_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 5
GXL3D_RENDERER_BLEND_FACTOR_DST_COLOR = 6
GXL3D_RENDERER_BLEND_FACTOR_DST_ALPHA = 7
GXL3D_RENDERER_BLEND_FACTOR_SRC_COLOR = 8
GXL3D_RENDERER_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 9
--]]





gh_renderer.set_vsync(1)
gh_renderer.set_scissor_state(0)
gh_renderer.set_depth_test_state(1)
 

mouse_x = 0
mouse_y = 0

		]]></raw_data>
	</script> 
	
	<script name="update_scene" run_mode="FRAME" >
		<raw_data><![CDATA[	
    
GH_DoCameraOrbit_v2(orbit_camera, g_cam_lookat)

gh_camera.bind(camera_ortho)
    
gh_renderer.clear_color_depth_buffers(0.2, 0.2, 0.2, 1.0, 1.0)
gh_renderer.set_depth_test_state(1)

elapsed_time = gh_utils.get_elapsed_time()
x, y, z = gh_object.get_position(orbit_camera)
mouse_x, mouse_y = gh_input.mouse_getpos()


gh_gpu_program.bind(gpu_prog)
gh_gpu_program.uniform1f(gpu_prog, "time", elapsed_time)
gh_gpu_program.uniform3f(gpu_prog, "cam_pos", x, y, -z)
gh_gpu_program.uniform2f(gpu_prog, "resolution", winW, winH)
gh_gpu_program.uniform2f(gpu_prog, "mouse", mouse_x, winH-mouse_y)

gh_object.render(mesh_quad)



--[[
gh_renderer.set_blending_state(1)
gh_renderer.set_blending_factors(GXL3D_RENDERER_BLEND_FACTOR_SRC_COLOR, GXL3D_RENDERER_BLEND_FACTOR_ONE) 
gh_renderer.set_depth_test_state(0)
gh_gpu_program.bind(tex_prog)
gh_texture.bind(logo_tex, 0)
gh_object.set_position(quad_logo, winW/2-110, winH/2 - 90, 0)
gh_object.render(quad_logo)
gh_renderer.set_blending_state(0)
--]]


		]]></raw_data>
	</script> 
  
	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	
winW, winH = gh_window.getsize(0)

gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

gh_camera.update_ortho(camera_ortho, -winW/2, winW/2, -winH/2, winH/2, 1.0, -1.0)
gh_camera.set_viewport(camera_ortho, 0, 0, winW, winH)

gh_mesh.update_quad_size(mesh_quad, winW, winH)

		]]></raw_data>
	</script> 

</glsl_hacker>
