<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>
	
  <window name="win3d01" title="GLSL Sandbox, demo 2902_4 (OpenGL 2.1)" 
          width="800" height="600" 
          gl_version_major="2" gl_version_minor="1"
          build_opengl_extensions_list="0" />


<gpu_program name="gpu_program" >
	<raw_data_vs><![CDATA[	 
void main()
{	
	gl_TexCoord[0] = gl_MultiTexCoord0;
	//gl_Position = ftransform();		
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;		
}
  ]]></raw_data_vs>
  
	<raw_data_ps><![CDATA[	 
// http://glsl.heroku.com/e#2902.4

// too many damn distance fields on glsl sandbox,
// how about some volume rendering?!
// @simesgreen

#ifdef GL_ES
precision highp float;
#endif

uniform vec2 resolution;
uniform float time;
//uniform vec2 mouse;
//uniform float zoom;

uniform vec2 surfaceSize;
//uniform vec2 surfacePosition;

const int _VolumeSteps = 64;
const float _StepSize = 0.05; 
const float _Density = 0.2;

const float _SphereRadius = 3.0;
const float _NoiseFreq = 3.0;
const float _NoiseAmp = 6.0;
const vec3 _NoiseAnim = vec3(0, 0.0, 0);

// iq's nice integer-less noise function

// matrix to rotate the noise octaves
mat3 m = mat3( 0.00,  0.80,  0.60,
              -0.80,  0.36, -0.48,
              -0.60, -0.48,  0.64 );

float hash( float n )
{
    return fract(sin(n)*43758.5453);
}


float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);

    f = f*f*(3.0-2.0*f);

    float n = p.x + p.y*57.0 + 113.0*p.z;

    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
    return res;
}

float fbm( vec3 p )
{
    float f;
    f = 0.5000*noise( p ); p = m*p*2.02;
    f += 0.2500*noise( p ); p = m*p*2.03;
    f += 0.1250*noise( p ); p = m*p*2.01;
    f += 0.0625*noise( p );
    //p = m*p*2.02; f += 0.03125*abs(noise( p ));  
    return f;
}

// returns signed distance to surface
float distanceFunc(vec3 p)
{  
  float d = length(p) - _SphereRadius;  // distance to sphere
  
  // offset distance with pyroclastic noise
  //p = normalize(p) * _SphereRadius;  // project noise point to sphere surface
  d += fbm(p*_NoiseFreq) * _NoiseAmp;
  return d;
}

// color gradient 
// this should be in a 1D texture really
vec4 gradient(float x)
{
  // no constant array initializers allowed in GLES SL!
  const vec4 c0 = vec4(2, 2, 1, 1);  // yellow
  const vec4 c1 = vec4(1, 0, 0, 1);  // red
  const vec4 c2 = vec4(0, 0, 0, 0);   // black
  const vec4 c3 = vec4(0, 0.5, 1, 0.5);   // blue
  const vec4 c4 = vec4(0, 0, 0, 0);   // black
  
  x = clamp(x, 0.0, 0.999);
  float t = fract(x*4.0);
  vec4 c;
  if (x < 0.25) {
    c =  mix(c0, c1, t);
  } else if (x < 0.5) {
    c = mix(c1, c2, t);
  } else if (x < 0.75) {
    c = mix(c2, c3, t);
  } else {
    c = mix(c3, c4, t);    
  }
  //return vec4(x);
  //return vec4(t);
  return c;
}

// shade a point based on distance
vec4 shade(float d)
{  
  // lookup in color gradient
  //vec4 c = gradient(d);
  //return c;
  //return  gradient(d);
  //return mix(vec4(1, 1, 1, 1), vec4(0, 0, 0, 0), smoothstep(0.9, 1.4, d));

  vec4 c = gradient(d)*0.6 +  mix(vec4(1, 1, 1, 1), vec4(0, 0, 0, 0), smoothstep(0.9, 1.4, d))*0.4;
  return c;


}

// procedural volume
// maps position to color
vec4 volumeFunc(vec3 p)
{
  float d = distanceFunc(p);
  return shade(d);
}

// ray march volume from front to back
// returns color
vec4 rayMarch(vec3 rayOrigin, vec3 rayStep, out vec3 pos)
{
  vec4 sum = vec4(0, 0, 0, 0);
  pos = rayOrigin;
  for(int i=0; i<_VolumeSteps; i++) {
    vec4 col = volumeFunc(pos);
    col.a *= _Density;
    //col.a = min(col.a, 1.0);
    
    // pre-multiply alpha
    col.rgb *= col.a;
    sum = sum + col*(1.0 - sum.a);  
#if 0
    // exit early if opaque
          if (sum.a > _OpacityThreshold)
                break;
#endif    
    pos += rayStep;
  }
  return sum;
}

void main(void)
{
    //vec2 q = gl_FragCoord.xy / resolution.xy;
    //vec2 p = -1.0 + 2.0 * q;

    vec2 q = gl_TexCoord[0].xy *2.0 - 1.0;
    vec2 p = q;
    
    p.x *= resolution.x/resolution.y;
  
    //float rotx = mouse.y*4.0;
    //float roty = - mouse.x*4.0;
    float rotx = time*0.3;
    float roty = time * 0.5;

    //float zoom = 5.0*surfaceSize.y;
    float zoom = 5.0;

    // camera
    vec3 ro = zoom*normalize(vec3(cos(roty), cos(rotx), sin(roty)));
    vec3 ww = normalize(vec3(0.0,0.0,0.0) - ro);
    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));
    vec3 vv = normalize(cross(ww,uu));
    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );

    ro += rd*2.0;
  
    // volume render
    vec3 hitPos;
    vec4 col = rayMarch(ro, rd*_StepSize, hitPos);
    //vec4 col = gradient(p.x);
      
    gl_FragColor = col;
}
  ]]></raw_data_ps>

</gpu_program>


  
  
	<script name="init_scene" run_mode="INIT" >
		<raw_data><![CDATA[	
    
winW, winH = gh_window.getsize(0)

aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
   
font_a = gh_utils.font_create("Tahoma", 14)

camera = gh_camera.create_persp(60, aspect, 1.0, 2000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)
gh_camera.setpos(camera, 0, 0, 400)
gh_camera.setlookat(camera, 0, 0, 0)
gh_camera.setupvec(camera, 0, 1, 0, 0)

gpu_prog_01 = gh_node.getid("gpu_program")

mesh_quad = gh_mesh.create_quad(winW, winH)
gh_object.use_gl2_vertex_array(mesh_quad, 1) -- *** Old OpenGL... ***

gh_renderer.set_vsync(0)
gh_renderer.set_scissor_state(0)

		]]></raw_data>
	</script> 
  
	<script name="update_scene" run_mode="FRAME" >
		<raw_data><![CDATA[	

elapsed_time = gh_utils.get_elapsed_time()

gh_renderer.set_depth_test_state(1)

-- gh_camera.update_persp(camera, 60, aspect, 1.0, 2000.0) 
-- gh_camera.setpos(camera, 600, 0, 400) 
gh_camera.setpos(camera, 0, 0, 400) 
gh_camera.bind(camera)

gh_renderer.clear_color_depth_buffers(0.0, 0.0, 0.0, 1.0, 1.0)

gh_gpu_program.bind(gpu_prog_01)
gh_gpu_program.uniform1f(gpu_prog_01, "time", elapsed_time)
gh_gpu_program.uniform2f(gpu_prog_01, "resolution", winW, winH)
-- mouse_x, mouse_y = gh_input.mouse_getpos() 
-- gh_gpu_program.uniform2f(gpu_prog_01, "mouse", mouse_x, winH-mouse_y)

--gh_gpu_program.uniform2f(gpu_prog_01, "surfaceSize", 1.0, 1.0)

gh_object.render(mesh_quad)

gh_utils.font_render(font_a, 10, 20, 0.2, 1.0, 0.0, 1.0, "GLSL Hacker demo - GLSL Sandbox demo")

		]]></raw_data>
	</script> 
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
gh_camera.update_persp(camera, 60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)

gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

gh_mesh.update_quad_size(mesh_quad, winW, winH)


		]]></raw_data>
	</script> 
  
  
</glsl_hacker>
