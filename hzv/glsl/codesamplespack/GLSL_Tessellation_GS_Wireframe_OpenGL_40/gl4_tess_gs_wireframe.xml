<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<!--
Reference: http://prideout.net/blog/?p=48
-->

<glsl_hacker>
	
  <window name="win3d01" title="GLSL Hacker - Tessellation shaders (OpenGL 4.0)" 
          width="680" height="400" 
          gl_version_major="4" gl_version_minor="0" />
  
  <gpu_program name="tess_gs_wireframe_prog"  >
    <raw_data_vs><![CDATA[	 
#version 400
in vec4 gxl3d_Position;
void main()
{
  gl_Position = gxl3d_Position;
}
  ]]></raw_data_vs>
  
    <raw_data_tcs><![CDATA[	 
#version 400
layout(vertices = 3) out;
uniform float tessLevelOuter;
uniform float tessLevelInner;
void main()
{
  gl_TessLevelOuter[0] = tessLevelOuter;
  gl_TessLevelOuter[1] = tessLevelOuter;
  gl_TessLevelOuter[2] = tessLevelOuter;
  gl_TessLevelInner[0] = tessLevelInner;
  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}
  ]]></raw_data_tcs>
  
    <raw_data_tes><![CDATA[	 
#version 400

layout(triangles, equal_spacing, ccw) in;

uniform mat4 gxl3d_ViewMatrix;
uniform mat4 gxl3d_ProjectionMatrix;
uniform mat4 gxl3d_ModelViewProjectionMatrix;

out vec3 tePosition;
out vec3 tePatchDistance;

void main()
{
  float u = gl_TessCoord.x;
  float v = gl_TessCoord.y;
  float w = gl_TessCoord.z;

  tePatchDistance = gl_TessCoord;  
  
  vec4 pos = vec4(0);
  pos.xyz += u * gl_in[0].gl_Position.xyz;
  pos.xyz += v * gl_in[1].gl_Position.xyz;
  pos.xyz += w * gl_in[2].gl_Position.xyz;
  pos.w = 1.0;
  
  tePosition = pos.xyz;

  gl_Position = gxl3d_ModelViewProjectionMatrix * pos;
}
  ]]></raw_data_tes>
  
    <raw_data_gs><![CDATA[	 
#version 400
    
uniform mat4 gxl3d_ModelViewMatrix;
uniform mat4 gxl3d_ViewMatrix;
uniform vec4 light_position;

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in vec3 tePosition[3];
in vec3 tePatchDistance[3];

out vec3 gFaceLight;
out vec3 gFacetNormal;
out vec3 gPatchDistance;
out vec3 gTriDistance;

void main()
{
    vec3 A = tePosition[2] - tePosition[0];
    vec3 B = tePosition[1] - tePosition[0];
    vec3 N = normalize(cross(A, B));
    gFacetNormal = vec3(gxl3d_ModelViewMatrix * vec4(N, 0.0));
    gFaceLight = vec3(gxl3d_ViewMatrix * light_position);
    
    gPatchDistance = tePatchDistance[0];
    gTriDistance = vec3(1, 0, 0);
    gl_Position = gl_in[0].gl_Position; EmitVertex();
   
    gPatchDistance = tePatchDistance[1];
    gTriDistance = vec3(0, 1, 0);
    gl_Position = gl_in[1].gl_Position; EmitVertex();

    gPatchDistance = tePatchDistance[2];
    gTriDistance = vec3(0, 0, 1);
    gl_Position = gl_in[2].gl_Position; EmitVertex();
   
    EndPrimitive();
}    
  ]]></raw_data_gs>
  
  
    <raw_data_ps><![CDATA[	 
#version 400
precision highp float;
uniform mat4 gxl3d_ViewMatrix;
uniform vec4 color;
in vec3 gFaceLight;
in vec3 gFacetNormal;
in vec3 gTriDistance;
in vec3 gPatchDistance;
in float gPrimitive;
out vec4 Out_Color;

float amplify(float d, float scale, float offset)
{
  d = scale * d + offset;
  d = clamp(d, 0, 1);
  d = 1 - exp2(-2*d*d);
  return d;
}

void main()
{
  vec3 N = normalize(gFacetNormal);
  vec3 L = normalize(gFaceLight);
  
  float df = dot(N, L);
  float diffuse =  max(df, 0.0);

  vec3 color = vec3(0.5, 0.9, 0.9) * (1.0-diffuse);
  //vec3 color = vec3(0.2, 0.4, 0.5);
 
  float d1 = min(min(gTriDistance.x, gTriDistance.y), gTriDistance.z);
  float d2 = min(min(gPatchDistance.x, gPatchDistance.y), gPatchDistance.z);
  color = amplify(d1, 40, -0.5) * amplify(d2, 60, -0.5) * color;
   
  Out_Color = vec4(color, 1.0);
}
    ]]></raw_data_ps>
  
  </gpu_program>
  
  
	<script name="init_scene" run_mode="INIT" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

font_a = gh_utils.font_create("Tahoma", 14)
gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

-- camera = gh_camera.create_perspective(0, 15, 20, 0, 0, 0)
local aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
camera = gh_camera.create_persp(30, aspect, 0.1, 500.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)
gh_camera.setpos(camera, 0, 15, 20)
gh_camera.setlookat(camera, 0, 0, 0)
gh_camera.setupvec(camera, 0, 1, 0, 0)


mesh_sphere = gh_mesh.create_sphere(10, 10, 10)

-- GL_ARB_tessellation_shader_ok = gh_renderer.check_opengl_extension("GL_ARB_tessellation_shader")
GL_ARB_tessellation_shader_ok = 1

tess_prog = 0

if (GL_ARB_tessellation_shader_ok == 1) then
  tess_prog = gh_node.getid("tess_gs_wireframe_prog")
  gh_object.set_tessellation_state(mesh_sphere, 1)
end


gh_renderer.set_vsync(0)
gh_renderer.set_scissor_state(1)
gh_renderer.set_depth_test_state(1)



		]]></raw_data>
	</script> 

 
	<script name="update_scene" run_mode="FRAME" >
		<raw_data><![CDATA[	

elapsed_time = gh_utils.get_elapsed_time()

gh_camera.set_position(camera, 0, 0, 30)
gh_camera.bind(camera)

gh_renderer.set_depth_test_state(1)
gh_renderer.clear_color_depth_buffers(178/255, 153/255,127/255, 1.0, 1.0)


-- Useful for live coding...
outer_tess_level = 3
inner_tess_level = 3


if (GL_ARB_tessellation_shader_ok == 1) then
  gh_gpu_program.bind(tess_prog)
  gh_gpu_program.uniform1f(tess_prog, "tessLevelOuter", outer_tess_level)
  gh_gpu_program.uniform1f(tess_prog, "tessLevelInner", inner_tess_level)
  gh_gpu_program.uniform4f(tess_prog, "color", 1, 0, 0, 1)
  gh_gpu_program.uniform4f(tess_prog, "light_position", 50, 50, 20, 1)
  
  gh_object.set_position(mesh_sphere, 0, 0, 5)
  gh_object.set_euler_angles(mesh_sphere, elapsed_time*3, elapsed_time*5, elapsed_time*7)
  gh_object.render(mesh_sphere)

else  
  gh_object.set_euler_angles(mesh_sphere, 0, elapsed_time*5, 0)
  gh_object.render(mesh_sphere)
end



gh_utils.font_render(font_a, 10, 20, 1.0, 1.0, 1.0, 1.0, "GLSL Hacker - OpenGL 4.0 wireframe shader test")
if (GL_ARB_tessellation_shader_ok == 1) then
  gh_utils.font_render(font_a, 10,40, 0.7, 0.7, 0.7, 1.0, "Tessellation shaders supported.")
  gh_utils.font_render(font_a, 10,60, 1.0, 1.0, 1.0, 1.0, "Tess level - outer: " .. outer_tess_level .. " - inner: " .. inner_tess_level)
else
  gh_utils.font_render(font_a, 10,40, 0.9, 1.0, 0.0, 1.0, "Tessellation shaders are NOT supported by your system :(")
end
		]]></raw_data>
	</script> 
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

aspect = 1.333
if (winH > 0) then
  aspect = winW / winH
end  
gh_camera.update_persp(camera, 30, aspect, 0.1, 500.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)

gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

		]]></raw_data>
	</script> 
  
  
</glsl_hacker>
