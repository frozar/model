<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>

<glsl_hacker>
	
  <window name="win3d01" title="OpenGL Interpolation Qualifiers (GL3.2)" width="680" height="400"
          gl_version_major="3" gl_version_minor="2" />
  
  
  <gpu_program name="gpu_prog_01" >
    <raw_data_vs><![CDATA[	 
#version 150
in vec4 gxl3d_Position;
in vec4 gxl3d_TexCoord0;
uniform mat4 gxl3d_ModelViewProjectionMatrix;

//noperspective out vec4 VertexUV;
smooth out vec4 VertexUV;
//flat out vec4 VertexUV;

void main()
{
  gl_Position = gxl3d_ModelViewProjectionMatrix * gxl3d_Position;
  VertexUV = gxl3d_TexCoord0 * 4;
}
  ]]></raw_data_vs>
    <raw_data_ps><![CDATA[	 
#version 150

//noperspective in vec4 VertexUV;
smooth in vec4 VertexUV;
//flat in vec4 VertexUV;

uniform sampler2D tex0;
out vec4 Out_Color;
void main()
{
  Out_Color = texture(tex0,VertexUV.xy);
}
    ]]></raw_data_ps>
  </gpu_program>
  

  
	<script name="init_scene" run_mode="INIT" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

font_a = gh_utils.font_create("Tahoma", 14)
gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

local aspect = winW / winH
camera = gh_camera.create_persp(60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)
gh_camera.setpos(camera, 0, 10, 20)
gh_camera.setlookat(camera, 0, 0, 0)
gh_camera.setupvec(camera, 0, 1, 0, 0)

glsl_prog = gh_node.getid("gpu_prog_01")

mesh_quad = gh_mesh.create_quad(30, 15)
gh_mesh.set_vertex_color(mesh_quad, 0, 1, 0, 0, 1)
gh_mesh.set_vertex_color(mesh_quad, 1, 0, 1, 0, 1)
gh_mesh.set_vertex_color(mesh_quad, 2, 0, 0, 1, 1)
gh_mesh.set_vertex_color(mesh_quad, 3, 1, 1, 0, 1)

local abs_path = 0
tex01 = gh_texture.create_from_file("./5790.jpg", 0, abs_path)


gh_renderer.set_vsync(0)
gh_renderer.set_scissor_state(1)
gh_renderer.set_depth_test_state(1)

		]]></raw_data>
	</script> 

  
	<script name="update_scene" run_mode="FRAME" >
		<raw_data><![CDATA[	

elapsed_time = gh_utils.get_elapsed_time()

gh_camera.setpos(camera, 0, 0, 20)
gh_camera.bind(camera)

gh_renderer.clear_color_depth_buffers(0.2, 0.2, 0.2, 1.0, 1.0)

gh_gpu_program.bind(glsl_prog)

gh_texture.bind(tex01, 0)

-- gh_object.set_euler_angles(mesh_quad, 0, elapsed_time*50, 0)
gh_object.set_euler_angles(mesh_quad, -50, 0, 0)
gh_object.render(mesh_quad)

-- With a coe profile, the text is not rendered.
gh_utils.font_render(font_a, 10, 20, 0.2, 1.0, 0.0, 1.0, "GLSL Hacker demo - Simple GLSL program")

		]]></raw_data>
	</script> 
	

	<script name="resize_scene" run_mode="SIZE" >
		<raw_data><![CDATA[	

winW, winH = gh_window.getsize(0)

local aspect = winW / winH
gh_camera.update_persp(camera, 60, aspect, 0.1, 1000.0)
gh_camera.set_viewport(camera, 0, 0, winW, winH)

gh_utils.font_set_viewport_info(font_a, 0, 0, winW, winH)

		]]></raw_data>
	</script> 
  
  
</glsl_hacker>
