
#include <stdio.h>
#include <string.h>

// Specific format for printf and uint*_t argument
#include <cinttypes>

// exit() function
#include <cstdlib>

typedef unsigned char u8;
typedef unsigned int u32;


u8 confusion[512]={
0xac,0xd1,0x25,0x94,0x1f,0xb3,0x33,0x28,0x7c,0x2b,0x17,0xbc,0xf6,0xb0,0x55,0x5d,
0x8f,0xd2,0x48,0xd4,0xd3,0x78,0x62,0x1a,0x02,0xf2,0x01,0xc9,0xaa,0xf0,0x83,0x71,
0x72,0x4b,0x6a,0xe8,0xe9,0x42,0xc0,0x53,0x63,0x66,0x13,0x4a,0xc1,0x85,0xcf,0x0c,
0x24,0x76,0xa5,0x6e,0xd7,0xa1,0xec,0xc6,0x04,0xc2,0xa2,0x5c,0x81,0x92,0x6c,0xda,
0xc6,0x86,0xba,0x4d,0x39,0xa0,0x0e,0x8c,0x8a,0xd0,0xfe,0x59,0x96,0x49,0xe6,0xea,
0x69,0x30,0x52,0x1c,0xe0,0xb2,0x05,0x9b,0x10,0x03,0xa8,0x64,0x51,0x97,0x02,0x09,
0x8e,0xad,0xf7,0x36,0x47,0xab,0xce,0x7f,0x56,0xca,0x00,0xe3,0xed,0xf1,0x38,0xd8,
0x26,0x1c,0xdc,0x35,0x91,0x43,0x2c,0x74,0xb4,0x61,0x9d,0x5e,0xe9,0x4c,0xbf,0x77,
0x16,0x1e,0x21,0x1d,0x2d,0xa9,0x95,0xb8,0xc3,0x8d,0xf8,0xdb,0x34,0xe1,0x84,0xd6,
0x0b,0x23,0x4e,0xff,0x3c,0x54,0xa7,0x78,0xa4,0x89,0x33,0x6d,0xfb,0x79,0x27,0xc4,
0xf9,0x40,0x41,0xdf,0xc5,0x82,0x93,0xdd,0xa6,0xef,0xcd,0x8d,0xa3,0xae,0x7a,0xb6,
0x2f,0xfd,0xbd,0xe5,0x98,0x66,0xf3,0x4f,0x57,0x88,0x90,0x9c,0x0a,0x50,0xe7,0x15,
0x7b,0x58,0xbc,0x07,0x68,0x3a,0x5f,0xee,0x32,0x9f,0xeb,0xcc,0x18,0x8b,0xe2,0x57,
0xb7,0x49,0x37,0xde,0xf5,0x99,0x67,0x5b,0x3b,0xbb,0x3d,0xb5,0x2d,0x19,0x2e,0x0d,
0x93,0xfc,0x7e,0x06,0x08,0xbe,0x3f,0xd9,0x2a,0x70,0x9a,0xc8,0x7d,0xd8,0x46,0x65,
0x22,0xf4,0xb9,0xa2,0x6f,0x12,0x1b,0x14,0x45,0xc7,0x87,0x31,0x60,0x29,0xf7,0x73,
0x2c,0x97,0x72,0xcd,0x89,0xa6,0x88,0x4c,0xe8,0x83,0xeb,0x59,0xca,0x50,0x3f,0x27,
0x4e,0xae,0x43,0xd5,0x6e,0xd0,0x99,0x7b,0x7c,0x40,0x0c,0x52,0x86,0xc1,0x46,0x12,
0x5a,0x28,0xa8,0xbb,0xcb,0xf0,0x11,0x95,0x26,0x0d,0x34,0x66,0x22,0x18,0x6f,0x51,
0x9b,0x3b,0xda,0xec,0x5e,0x00,0x2a,0xf5,0x8f,0x61,0xba,0x96,0xb3,0xd1,0x30,0xdc,
0x33,0x75,0xe9,0x6d,0xc8,0xa1,0x3a,0x3e,0x5f,0x9d,0xfd,0xa9,0x31,0x9f,0xaa,0x85,
0x2f,0x92,0xaf,0x67,0x78,0xa5,0xab,0x03,0x21,0x4f,0xb9,0xad,0xfe,0xf3,0x42,0xfc,
0x17,0xd7,0xee,0xa3,0xd8,0x80,0x14,0x2e,0xa0,0x47,0x55,0xc4,0xff,0xe5,0x13,0x3f,
0x81,0xb6,0x7a,0x94,0xd0,0xb5,0x54,0xbf,0x91,0xa7,0x37,0xf1,0x6b,0xc9,0x1b,0xb1,
0x3c,0xb6,0xd9,0x32,0x24,0x8d,0xf2,0x82,0xb4,0xf9,0xdb,0x7d,0x44,0xfb,0x1e,0xd4,
0xea,0x5d,0x35,0x69,0x23,0x71,0x57,0x01,0x06,0xe4,0x55,0x9a,0xa4,0x58,0x56,0xc7,
0x4a,0x8c,0x8a,0xd6,0x6a,0x49,0x70,0xc5,0x8e,0x0a,0x62,0xdc,0x29,0x4b,0x42,0x41,
0xcb,0x2b,0xb7,0xce,0x08,0xa1,0x76,0x1d,0x1a,0xb8,0xe3,0xcc,0x7e,0x48,0x20,0xe6,
0xf8,0x45,0x93,0xde,0xc3,0x63,0x0f,0xb0,0xac,0x5c,0xba,0xdf,0x07,0x77,0xe7,0x4e,
0x1f,0x28,0x10,0x6c,0x59,0xd3,0xdd,0x2d,0x65,0x39,0xb2,0x74,0x84,0x3d,0xf4,0xbd,
0xc7,0x79,0x60,0x0b,0x4d,0x33,0x36,0x25,0xbc,0xe0,0x09,0xcf,0x5b,0xe2,0x38,0x9e,
0xc0,0xef,0xd2,0x16,0x05,0xbe,0x53,0xf7,0xc2,0xc6,0xa2,0x24,0x98,0x1c,0xad,0x04};


u32 diffusion[32]={
0xf26cb481,0x16a5dc92,0x3c5ba924,0x79b65248,0x2fc64b18,0x615acd29,0xc3b59a42,0x976b2584,
0x6cf281b4,0xa51692dc,0x5b3c24a9,0xb6794852,0xc62f184b,0x5a6129cd,0xb5c3429a,0x6b978425,
0xb481f26c,0xdc9216a5,0xa9243c5b,0x524879b6,0x4b182fc6,0xcd29615a,0x9a42c3b5,0x2584976b,
0x81b46cf2,0x92dca516,0x24a95b3c,0x4852b679,0x184bc62f,0x29cd5a61,0x429ab5c3,0x84256b97};


// u8 input[32]={
// //change only this :
// 0x66,0xd5,0x4e,0x28,0x5f,0xff,0x6b,0x53,0xac,0x3b,0x34,0x14,0xb5,0x3c,0xb2,0xc6,
// 0xa4,0x85,0x1e,0x0d,0x86,0xc7,0x4f,0xba,0x75,0x5e,0xcb,0xc3,0x6e,0x48,0x79,0x8f
// //
// };


// u8 input[32]={
// //change only this :
// 142, 227, 80, 127, 130, 84, 200, 254, 26, 231, 227, 250, 250, 242, 130, 134, 242, 73, 169, 192, 110, 18, 192, 30, 84, 92, 61, 84, 123, 7, 227, 119
// //
// };

// i = 1
// u8 input[32]={
// 189, 135, 177, 27, 208, 117, 229, 76, 186, 19, 241, 155, 71, 165, 127, 182, 75, 193, 200, 71, 175, 212, 180, 167, 152, 40, 40, 17, 226, 70, 201, 165
// };

// i = 1
// u8 input[32]={
// 22, 132, 41, 80, 15, 47, 8, 155, 182, 66, 217, 2, 5, 87, 15, 43, 233, 251, 110, 230, 177, 244, 49, 25, 222, 85, 252, 214, 208, 54, 97, 44
// };

// i = 1
// u8 input[32]={
// 22, 132, 41, 80, 15, 47, 8, 155, 182, 66, 217, 2, 5, 87, 15, 43, 233, 251, 110, 230, 177, 244, 49, 25, 222, 85, 252, 214, 208, 54, 97, 44
// };

// i = 2
// u8 input[32]={
// 187, 183, 71, 139, 57, 91, 169, 38, 125, 175, 77, 97, 110, 185, 12, 200, 128, 217, 91, 234, 150, 34, 84, 28, 110, 206, 227, 125, 56, 192, 139, 131
// };

// i = 2
// u8 input[32]={
// 238, 13, 57, 183, 46, 77, 87, 248, 65, 146, 50, 134, 214, 10, 160, 221, 247, 29, 46, 110, 69, 66, 164, 24, 251, 208, 204, 233, 142, 9, 15, 251
// };

// i = 2
// u8 input[32]={
// 136, 184, 40, 0, 12, 168, 229, 228, 6, 167, 252, 221, 202, 158, 214, 182, 122, 31, 81, 179, 159, 133, 41, 103, 199, 184, 168, 108, 1, 133, 48, 77
// };

// i = 3
// u8 input[32]={
// 65, 114, 215, 204, 99, 145, 180, 166, 191, 218, 241, 110, 3, 198, 57, 116, 111, 204, 149, 203, 42, 245, 35, 22, 91, 161, 214, 84, 213, 85, 72, 120
// };

// i = 4
// u8 input[32]={
// 57, 161, 204, 86, 115, 95, 216, 32, 67, 250, 23, 217, 211, 41, 225, 30, 23, 92, 193, 12, 96, 115, 49, 33, 78, 109, 31, 99, 99, 239, 31, 138
// };

// i = 5
// u8 input[32]={
// 47, 59, 15, 128, 108, 43, 26, 116, 16, 170, 172, 218, 242, 38, 138, 132, 26, 201, 2, 83, 98, 92, 95, 87, 26, 71, 32, 145, 214, 29, 127, 44
// };

// i = 5
// u8 input[32]={
// 96, 116, 218, 98, 210, 19, 18, 158, 18, 105, 14, 235, 187, 7, 230, 111, 89, 242, 133, 163, 0, 128, 189, 74, 193, 57, 71, 189, 167, 75, 115, 61
// };

// i = 6
// u8 input[32]={
// 119, 38, 2, 246, 235, 0, 121, 159, 143, 125, 0, 7, 127, 67, 246, 250, 252, 83, 14, 188, 29, 191, 185, 248, 69, 12, 52, 78, 210, 132, 105, 31
// };

// i = 7
// u8 input[32]={
// 222, 80, 55, 104, 145, 118, 242, 5, 232, 190, 203, 81, 5, 14, 205, 235, 212, 240, 86, 63, 85, 252, 214, 63, 18, 191, 69, 5, 84, 172, 3, 105
// };

// i = 7
u8 input[32]={
10, 68, 76, 10, 139, 75, 196, 22, 16, 82, 211, 105, 248, 145, 20, 102, 120, 156, 115, 162, 197, 52, 136, 201, 214, 231, 152, 217, 79, 6, 61, 229
};


void print_vec( u8 vec[ 32 ], const char * arg ) {
  printf( "%s: ", arg );
  for ( int i = 0 ; i < 32 ; ++i ) {
    printf( "%"PRIu8" ", vec[i] );
  }
  printf( "\n" );
}


void Forward( u8 c[32], u8 d[32], u8 s[512], u32 p[32] ) {

  // for ( u32 i = 0 ; i < 256 ; i++ ) {
  for ( u32 i = 0 ; i < 7 ; i++ ) {

    // Permutation/rotation/shuffeling
    for ( u8 j = 0 ; j < 32 ; j++ ) {
      d[ j ] = s[ c[ j ] ];
      c[ j ] = 0;
    }

    // print_vec( d, "confusion d" ) ;

    // matrix/vector multiplication
    for ( u8 j = 0 ; j < 32 ; j++ ){ 
      for ( u8 k = 0 ; k < 32 ; k++ ){
	c[ j ] ^= d[ k ] * ( ( p[ j ] >> k ) & 1 );
	// if ( j == 0 ){
	//   printf ( "k = %2d : %d * %d \n", 
	// 	   k, ( ( p[ j ] >> k ) & 1 ), d[ k ] );
	// }
      }
	// if ( j == 0 ){
	//   // printf ( "\n" );
	//   printf ( "c[ 0 ]= %"PRIu8" \n", c[ j ] );
	// }
    }

    print_vec( c, "diffusion c" ) ;

  }

  // exit( 0 );

  for ( u8 i = 0 ; i < 16 ; i++ )
    d[ i ] = s[ c[ i*2 ] ] ^ s[ c[ i*2 + 1 ] + 256 ];

  print_vec( d, "xor d" ) ;
}


int main( int argc, char* argv[] ) {

  u8 target[ ] = "Hire me!!!!!!!!";
  u8 output[32];

  print_vec( input, "input" ) ;

  // for ( int i = 0 ; i < 32 ; ++i ) {
  //   printf( "%"PRIu8" ", input[i] );
  // }
  // printf( "\n" );

  // for ( u8 j = 0 ; j < 32 ; j++ ) {
  //   for ( u8 k = 0 ; k < 32 ; k++ ) {
  //     printf ( "%1d ", ( diffusion[ j ] >> k ) & 1 );
  //   }
  //   printf ( "\n" );
  // }

  Forward( input, output, confusion, diffusion );

  printf( "output: {%s} \n", output );

  return memcmp( output, target, 16 ); // => contact jobs(at)nerd.nintendo.com

}

// g++ -std=c++0x HireMe.cpp && ./a.out 
