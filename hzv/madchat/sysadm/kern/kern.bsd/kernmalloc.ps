%!PS-Adobe-3.0
%%Creator: groff version 1.10
%%CreationDate: Fri Mar 14 13:23:19 1997
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Italic
%%+ font Times-Bold
%%+ font Symbol
%%DocumentSuppliedResources: procset grops 1.10 0
%%Pages: 10
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.10 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Bold
%%IncludeResource: font Symbol
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Bold@0 ENC0/Times-Bold RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndProlog
%%Page: 295 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(Reprinted from:)72 72 Q/F1 9/Times-Italic@0 SF
(Pr)2.25 E(oceedings of the San F)-.405 E -.135(ra)-.495 G
(ncisco USENIX Confer).135 E(ence)-.333 E F0 2.25(,p)C
(p. 295-303, June 1988.)-2.25 E/F2 12/Times-Bold@0 SF 4.2
(Design of a General Pur)108 123 R 4.2(pose Memory Allocator f)-.12 F
4.2(or the 4.3BSD)-.3 F(UNIX\207 K)250.746 138 Q(er)-.3 E(nel)-.18 E/F3
10/Times-Italic@0 SF(Mar)238.63 162 Q(shall Kirk McK)-.1 E(usic)-.4 E(k)
-.2 E(Mic)252.695 180 Q(hael J)-.15 E 2.5(.K)-.25 G(ar)-2.5 E(els)-.37 E
/F4 10/Times-Roman@0 SF(Computer Systems Research Group)216.48 198 Q
(Computer Science Di)232.85 210 Q(vision)-.25 E
(Department of Electrical Engineering and Computer Science)166.36 222 Q
(Uni)219.725 234 Q -.15(ve)-.25 G(rsity of California, Berk).15 E(ele)
-.1 E(y)-.15 E(Berk)232.625 246 Q(ele)-.1 E 1.3 -.65(y, C)-.15 H 2.5
(alifornia 94720).65 F F3(ABSTRA)264.535 282 Q(CT)-.3 E F4 3.644
(The 4.3BSD UNIX k)133 309.6 R 3.644(ernel uses man)-.1 F 6.145(ym)-.15
G 3.645(emory allocation mechanisms, each)-6.145 F .539
(designed for the particular needs of the utilizing subsystem.)108 321.6
R .539(This paper describes a gen-)5.539 F .389
(eral purpose dynamic memory allocator that can be used by all of the k)
108 333.6 R .389(ernel subsystems.)-.1 F 1.867
(The design of this allocator tak)108 345.6 R 1.867(es adv)-.1 F 1.867
(antage of kno)-.25 F 1.867(wn memory usage patterns in the)-.25 F .71
(UNIX k)108 357.6 R .71(ernel and a h)-.1 F .71(ybrid strate)-.05 F .71
(gy that is time-ef)-.15 F .71
(\214cient for small allocations and space-)-.25 F(ef)108 369.6 Q 1.882
(\214cient for lar)-.25 F 1.882(ge allocations.)-.18 F 1.882
(This allocator replaces the multiple memory allocation)6.882 F(interf)
108 381.6 Q .669(aces with a single easy-to-program interf)-.1 F .669
(ace, results in more ef)-.1 F .67(\214cient use of global)-.25 F 1.013
(memory by eliminating partitioned and specialized memory pools, and is\
 quick enough)108 393.6 R .746(that no performance loss is observ)108
405.6 R .746(ed relati)-.15 F 1.046 -.15(ve t)-.25 H 3.246(ot).15 G .746
(he current implementations.)-3.246 F .746(The paper)5.746 F 1.22
(concludes with a discussion of our e)108 417.6 R 1.22
(xperience in using the ne)-.15 F 3.72(wm)-.25 G 1.22(emory allocator)
-3.72 F 3.72(,a)-.4 G(nd)-3.72 E(directions for future w)108 429.6 Q
(ork.)-.1 E/F5 10/Times-Bold@0 SF 2.5(1. K)72 469.2 R(er)-.25 E
(nel Memory Allocation in 4.3BSD)-.15 E F4 .562(The 4.3BSD k)97 484.8 R
.562(ernel has at least ten dif)-.1 F .562(ferent memory allocators.)
-.25 F .562(Some of them handle lar)5.562 F .562(ge blocks,)-.18 F .805
(some of them handle small chained data structures, and others include \
information to describe I/O opera-)72 496.8 R 2.624(tions. Often)72
508.8 R .124(the allocations are for small pieces of memory that are on\
ly needed for the duration of a single)2.624 F .38(system call.)72 520.8
R .38(In a user process such short-term memory w)5.38 F .379
(ould be allocated on the run-time stack.)-.1 F(Because)5.379 E .383
(the k)72 532.8 R .383
(ernel has a limited run-time stack, it is not feasible to allocate e)
-.1 F -.15(ve)-.25 G 2.883(nm).15 G .384
(oderate blocks of memory on it.)-2.883 F(Consequently)72 544.8 Q 3.522
(,s)-.65 G 1.022
(uch memory must be allocated through a more dynamic mechanism.)-3.522 F
-.15(Fo)6.021 G 3.521(re).15 G 1.021(xample, when)-3.671 F .309
(the system must translate a pathname, it must allocate a one kilobye b)
72 556.8 R(uf)-.2 E .309(fer to hold the name.)-.25 F .309(Other blocks)
5.309 F .381(of memory must be more persistent than a single system cal\
l and really ha)72 568.8 R .681 -.15(ve t)-.2 H 2.881(ob).15 G 2.881(ea)
-2.881 G .381(llocated from dynamic)-2.881 F(memory)72 580.8 Q 6.518(.E)
-.65 G 1.518(xamples include protocol control blocks that remain throug\
hout the duration of the netw)-6.518 F(ork)-.1 E(connection.)72 592.8 Q
1.12(Demands for dynamic memory allocation in the k)97 608.4 R 1.12
(ernel ha)-.1 F 1.42 -.15(ve i)-.2 H 1.12(ncreased as more services ha)
.15 F 1.42 -.15(ve b)-.2 H(een).15 E 3.767(added. Each)72 620.4 R 1.267
(time a ne)3.767 F 3.767(wt)-.25 G 1.267(ype of memory allocation has b\
een required, a specialized memory allocation)-3.767 F .206
(scheme has been written to handle it.)72 632.4 R .206(Often the ne)
5.206 F 2.706(wm)-.25 G .206(emory allocation scheme has been b)-2.706 F
.205(uilt on top of an)-.2 F 1.685(older allocator)72 644.4 R 6.685(.F)
-.55 G 1.685(or e)-6.835 F 1.686(xample, the block de)-.15 F 1.686
(vice subsystem pro)-.25 F 1.686
(vides a crude form of memory allocation)-.15 F 1.824
(through the allocation of empty b)72 656.4 R(uf)-.2 E 1.824
(fers [Thompson78].)-.25 F 1.823(The allocation is slo)6.824 F 4.323(wb)
-.25 G 1.823(ecause of the implied)-4.323 F 1.061
(semantics of \214nding the oldest b)72 668.4 R(uf)-.2 E(fer)-.25 E
3.561(,p)-.4 G 1.061(ushing its contents to disk if the)-3.561 F 3.561
(ya)-.15 G 1.061(re dirty)-3.561 F 3.562(,a)-.65 G 1.062(nd mo)-3.562 F
1.062(ving ph)-.15 F(ysical)-.05 E .871(memory into or out of the b)72
680.4 R(uf)-.2 E .871(fer to create the requested size.)-.25 F 2.471 -.8
(To r)5.871 H .871(educe the o).8 F -.15(ve)-.15 G .871(rhead, a `).15 F
(`ne)-.74 E(w')-.25 E 3.371('m)-.74 G(emory)-3.371 E .331(allocator w)72
692.4 R .331(as b)-.1 F .331
(uilt in 4.3BSD for name translation that allocates a pool of empty b)
-.2 F(uf)-.2 E 2.831(fers. It)-.25 F -.1(ke)2.831 G .332(eps them on).1
F 2.5(af)72 704.4 S(ree list so the)-2.5 E 2.5(yc)-.15 G
(an be quickly allocated and freed [McK)-2.5 E(usick85].)-.15 E .32 LW
144 712.4 72 712.4 DL/F6 8/Times-Roman@0 SF(\207UNIX is a re)72 724.2 Q
(gistered trademark of A)-.12 E(T&T in the US and other countries.)-.888
E F4(Summer USENIX '88)72 768 Q 100.46(295 San)119.62 F
(Francisco, June 20-24)2.5 E EP
%%Page: 296 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Design of a General Purpose Memory ...)90 48 Q
(McK)197.48 E(usick, Karels)-.15 E 1.098
(This memory allocation method has se)115 84 R -.15(ve)-.25 G 1.098
(ral dra).15 F 3.598(wbacks. First,)-.15 F 1.098(the ne)3.598 F 3.598
(wa)-.25 G 1.098(llocator can only handle a)-3.598 F 1.595
(limited range of sizes.)90 96 R 1.595(Second, it depletes the b)6.595 F
(uf)-.2 E 1.595(fer pool, as it steals memory intended to b)-.25 F(uf)
-.2 E 1.596(fer disk)-.25 F(blocks to other purposes.)90 108 Q(Finally)5
E 2.5(,i)-.65 G 2.5(tc)-2.5 G(reates yet another interf)-2.5 E
(ace of which the programmer must be a)-.1 E -.1(wa)-.15 G(re.).1 E
2.619(Ag)115 123.6 S .119
(eneralized memory allocator is needed to reduce the comple)-2.619 F
.118(xity of writing code inside the k)-.15 F(ernel.)-.1 E .617
(Rather than pro)90 135.6 R .617(viding man)-.15 F 3.117(ys)-.15 G .617
(emi-specialized w)-3.117 F .617(ays of allocating memory)-.1 F 3.117
(,t)-.65 G .617(he k)-3.117 F .617(ernel should pro)-.1 F .618
(vide a sin-)-.15 F .184(gle general purpose allocator)90 147.6 R 5.184
(.W)-.55 G .184(ith only a single interf)-5.584 F .183
(ace, programmers do not need to \214gure out the most)-.1 F .053
(appropriate w)90 159.6 R .053(ay to allocate memory)-.1 F 5.053(.I)-.65
G 2.553(fag)-5.053 G .054(ood general purpose allocator is a)-2.553 F
-.25(va)-.2 G .054(ilable, it helps a).25 F -.2(vo)-.2 G .054
(id the syn-).2 F
(drome of creating yet another special purpose allocator)90 171.6 Q(.)
-.55 E 2.006 -.8(To e)115 187.2 T .406(ase the task of understanding ho)
.8 F 2.906(wt)-.25 G 2.906(ou)-2.906 G .406
(se it, the memory allocator should ha)-2.906 F .706 -.15(ve a)-.2 H
2.905(ni).15 G(nterf)-2.905 E .405(ace simi-)-.1 F .224
(lar to the interf)90 199.2 R .224(ace of the well-kno)-.1 F .224
(wn memory allocator pro)-.25 F .225
(vided for applications programmers through the)-.15 F 3.749(Cl)90 211.2
S 1.249(ibrary routines)-3.749 F/F1 10/Times-Italic@0 SF(malloc)3.749 E
F0 .417 .416(\(\) a).833 H(nd)-.416 E F1(fr)3.748 E(ee)-.37 E F0 .416
(\(\)).833 G 6.248(.L)-.416 G(ik)-6.248 E 3.748(et)-.1 G 1.248
(he C library interf)-3.748 F 1.248
(ace, the allocation routine should tak)-.1 F 3.748(ea)-.1 G .041
(parameter specifying the size of memory that is needed.)90 223.2 R .041
(The range of sizes for memory requests should not)5.041 F 1.012
(be constrained.)90 235.2 R 1.011(The free routine should tak)6.012 F
3.511(eap)-.1 G 1.011
(ointer to the storage being freed, and should not require)-3.511 F(add\
itional information such as the size of the piece of memory being freed\
.)90 247.2 Q/F2 10/Times-Bold@0 SF 2.5(2. Criteria)90 271.2 R -.25(fo)
2.5 G 2.5(raK).25 G(er)-2.75 E(nel Memory Allocator)-.15 E F0 .771
(The design speci\214cation for a k)115 286.8 R .771
(ernel memory allocator is similar to, b)-.1 F .772
(ut not identical to, the design)-.2 F .005(criteria for a user le)90
298.8 R -.15(ve)-.25 G 2.504(lm).15 G .004(emory allocator)-2.504 F
5.004(.T)-.55 G .004
(he \214rst criterion for a memory allocator is that it mak)-5.004 F
2.504(eg)-.1 G .004(ood use)-2.504 F .393(of the ph)90 310.8 R .393
(ysical memory)-.05 F 5.393(.G)-.65 G .394(ood use of memory is measure\
d by the amount of memory needed to hold a set)-5.393 F
(of allocations at an)90 322.8 Q 2.5(yp)-.15 G(oint in time.)-2.5 E
(Percentage utilization is e)5 E(xpressed as:)-.15 E F1(utilization)
259.04 346.13 Q/F3 10/Symbol SF(=)3.04 E F1(requested)4.05 -7 M .4 LW
351.84 343.53 312.14 343.53 DL(required)314.41 353.13 Q F0 .421(Here, `)
90 369.72 R(`requested')-.74 E 2.921('i)-.74 G 2.921(st)-2.921 G .421
(he sum of the memory that has been requested and not yet freed.)-2.921
F -.74(``)5.42 G(Required').74 E 2.92('i)-.74 G 2.92(st)-2.92 G(he)-2.92
E 1.119(amount of memory that has been allocated for the pool from whic\
h the requests are \214lled.)90 381.72 R 1.119(An allocator)6.119 F .62
(requires more memory than requested because of fragmentation and a nee\
d to ha)90 393.72 R .919 -.15(ve a r)-.2 H .619(eady supply of free).15
F 1.132(memory for future requests.)90 405.72 R 3.632(Ap)6.132 G 1.133
(erfect memory allocator w)-3.632 F 1.133(ould ha)-.1 F 1.433 -.15
(ve a u)-.2 H 1.133(tilization of 100%.).15 F 1.133(In practice,)6.133 F
(ha)90 417.72 Q(ving a 50% utilization is considered good [K)-.2 E
(orn85].)-.35 E .718(Good memory utilization in the k)115 433.32 R .718
(ernel is more important than in user processes.)-.1 F .718
(Because user pro-)5.718 F .319(cesses run in virtual memory)90 445.32 R
2.819(,u)-.65 G .319
(nused parts of their address space can be paged out.)-2.819 F .32
(Thus pages in the pro-)5.32 F .022
(cess address space that are part of the `)90 457.32 R(`required')-.74 E
2.522('p)-.74 G .021(ool that are not being `)-2.522 F(`requested')-.74
E 2.521('n)-.74 G .021(eed not tie up ph)-2.521 F(ysi-)-.05 E .642
(cal memory)90 469.32 R 5.642(.B)-.65 G .642(ecause the k)-5.642 F .643
(ernel is not paged, all pages in the `)-.1 F(`required')-.74 E 3.143
('p)-.74 G .643(ool are held by the k)-3.143 F .643(ernel and)-.1 F .29
(cannot be used for other purposes.)90 481.32 R 1.89 -.8(To k)5.29 H .29
(eep the k).7 F .29
(ernel utilization percentage as high as possible, it is desir)-.1 F(-)
-.2 E .64(able to release unused memory in the `)90 493.32 R(`required')
-.74 E 3.14('p)-.74 G .64
(ool rather than to hold it as is typically done with user)-3.14 F 2.595
(processes. Because)90 505.32 R .095(the k)2.595 F .095
(ernel can directly manipulate its o)-.1 F .094
(wn page maps, releasing unused memory is f)-.25 F(ast;)-.1 E 2.5(au)90
517.32 S(ser process must do a system call to release memory)-2.5 E(.)
-.65 E .377
(The most important criterion for a memory allocator is that it be f)115
532.92 R 2.878(ast. Because)-.1 F .378(memory allocation is)2.878 F
1.553(done frequently)90 544.92 R 4.053(,as)-.65 G(lo)-4.053 E 4.053(wm)
-.25 G 1.553(emory allocator will de)-4.053 F 1.553
(grade the system performance.)-.15 F 1.552(Speed of allocation is)6.553
F .88(more critical when e)90 556.92 R -.15(xe)-.15 G .88
(cuting in the k).15 F .881(ernel than in user code, because the k)-.1 F
.881(ernel must allocate man)-.1 F 3.381(yd)-.15 G(ata)-3.381 E .258(st\
ructure that user processes can allocate cheaply on their run-time stac\
k.)90 568.92 R .258(In addition, the k)5.258 F .258(ernel represents)-.1
F .232(the platform on which all user processes run, and if it is slo)90
580.92 R 1.533 -.65(w, i)-.25 H 2.733(tw).65 G .233(ill de)-2.733 F .233
(grade the performance of e)-.15 F -.15(ve)-.25 G .233(ry pro-).15 F
(cess that is running.)90 592.92 Q .523(Another problem with a slo)115
608.52 R 3.022(wm)-.25 G .522
(emory allocator is that programmers of frequently-used k)-3.022 F .522
(ernel inter)-.1 F(-)-.2 E -.1(fa)90 620.52 S .748
(ces will feel that the).1 F 3.248(yc)-.15 G .748(annot af)-3.248 F .748
(ford to use it as their primary memory allocator)-.25 F 5.749(.I)-.55 G
.749(nstead the)-5.749 F 3.249(yw)-.15 G .749(ill b)-3.249 F(uild)-.2 E
.133(their o)90 632.52 R .132
(wn memory allocator on top of the original by maintaining their o)-.25
F .132(wn pool of memory blocks.)-.25 F(Multi-)5.132 E .915
(ple allocators reduce the ef)90 644.52 R(\214cienc)-.25 E 3.415(yw)-.15
G .916(ith which memory is used.)-3.415 F .916(The k)5.916 F .916
(ernel ends up with man)-.1 F 3.416(yd)-.15 G(if)-3.416 E(ferent)-.25 E
.221(free lists of memory instead of a single free list from which all \
allocation can be dra)90 656.52 R 2.721(wn. F)-.15 F .221(or e)-.15 F
.221(xample, con-)-.15 F .509(sider the case of tw)90 668.52 R 3.009(os)
-.1 G .509(ubsystems that need memory)-3.009 F 5.509(.I)-.65 G 3.009(ft)
-5.509 G(he)-3.009 E 3.01(yh)-.15 G -2.25 -.2(av e)-3.01 H .51(their o)
3.21 F .51(wn free lists, the amount of mem-)-.25 F .531
(ory tied up in the tw)90 680.52 R 3.031(ol)-.1 G .531(ists will be the\
 sum of the greatest amount of memory that each of the tw)-3.031 F 3.03
(os)-.1 G(ubsys-)-3.03 E .224(tems has e)90 692.52 R -.15(ve)-.25 G
2.724(ru).15 G 2.724(sed. If)-2.724 F(the)2.724 E 2.724(ys)-.15 G .224(\
hare a free list, the amount of memory tied up in the free list may be \
as lo)-2.724 F 2.725(wa)-.25 G(s)-2.725 E .695
(the greatest amount of memory that either subsystem used.)90 704.52 R
.694(As the number of subsystems gro)5.694 F .694(ws, the sa)-.25 F(v-)
-.2 E(ings from ha)90 716.52 Q(ving a single free list gro)-.2 E -.65
(w.)-.25 G(Summer USENIX '88)90 768 Q 100.46(296 San)119.62 F
(Francisco, June 20-24)2.5 E EP
%%Page: 297 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(McK)90 48 Q(usick, Karels)-.15 E
(Design of a General Purpose Memory ...)197.48 E/F1 10/Times-Bold@0 SF
2.5(3. Existing)90 84 R(User)2.5 E(-le)-.37 E -.1(ve)-.15 G 2.5(lI).1 G
(mplementations)-2.5 E F0 .281(There are man)115 99.6 R 2.781(yd)-.15 G
(if)-2.781 E .282(ferent algorithms and implementations of user)-.25 F
(-le)-.2 E -.15(ve)-.25 G 2.782(lm).15 G .282(emory allocators.)-2.782 F
2.782(As)5.282 G(urv)-2.782 E -.15(ey)-.15 G 1.582(of those a)90 111.6 R
-.25(va)-.2 G 1.582(ilable on UNIX systems appeared in [K).25 F 4.081
(orn85]. Nearly)-.35 F 1.581(all of the memory allocators tested)4.081 F
.546(made good use of memory)90 123.6 R 3.046(,t)-.65 G .546
(hough most of them were too slo)-3.046 F 3.046(wf)-.25 G .547
(or use in the k)-3.046 F 3.047(ernel. The)-.1 F -.1(fa)3.047 G .547
(stest memory).1 F .591(allocator in the surv)90 135.6 R .891 -.15(ey b)
-.15 H 3.091(yn).15 G .591(early a f)-3.091 F .591(actor of tw)-.1 F
3.091(ow)-.1 G .59(as the memory allocator pro)-3.191 F .59
(vided on 4.2BSD originally)-.15 F .044(written by Chris Kingsle)90
147.6 R 2.544(ya)-.15 G 2.544(tC)-2.544 G .045(alifornia Institute of T)
-2.544 F(echnology)-.7 E 5.045(.U)-.65 G(nfortunately)-5.045 E 2.545(,t)
-.65 G .045(he 4.2BSD memory alloca-)-2.545 F(tor also w)90 159.6 Q
(asted twice as much memory as its nearest competitor in the surv)-.1 E
-.15(ey)-.15 G(.)-.5 E 1.666(The 4.2BSD user)115 175.2 R(-le)-.2 E -.15
(ve)-.25 G 4.166(lm).15 G 1.666(emory allocator w)-4.166 F 1.665
(orks by maintaining a set of lists that are ordered by)-.1 F .425
(increasing po)90 187.2 R .425(wers of tw)-.25 F 2.925(o. Each)-.1 F
.425(list contains a set of memory blocks of its corresponding size.)
2.925 F 2.025 -.8(To f)5.425 H .425(ul\214ll a).8 F .202
(memory request, the size of the request is rounded up to the ne)90
199.2 R .202(xt po)-.15 F .202(wer of tw)-.25 F 2.702(o. A)-.1 F .202
(piece of memory is then)2.702 F(remo)90 211.2 Q -.15(ve)-.15 G 3.346
(df).15 G .846(rom the list corresponding to the speci\214ed po)-3.346 F
.846(wer of tw)-.25 F 3.347(oa)-.1 G .847(nd returned to the requester)
-3.347 F 5.847(.T)-.55 G .847(hus, a)-5.847 F .504(request for a block \
of memory of size 53 returns a block from the 64-sized list.)90 223.2 R
3.004(At)5.504 G .504(ypical memory alloca-)-3.004 F 1.184
(tion requires a roundup calculation follo)90 235.2 R 1.185
(wed by a link)-.25 F 1.185(ed list remo)-.1 F -.25(va)-.15 G 3.685
(l. Only).25 F 1.185(if the list is empty is a real)3.685 F .128
(memory allocation done.)90 247.2 R .128(The free operation is also f)
5.128 F .128(ast; the block of memory is put back onto the list from)-.1
F .684(which it came.)90 259.2 R .684(The correct list is identi\214ed \
by a size indicator stored immediately preceding the memory)5.684 F
(block.)90 271.2 Q F1 2.5(4. Considerations)90 295.2 R(Unique to a K)2.5
E(er)-.25 E(nel Allocator)-.15 E F0 .197(There are se)115 310.8 R -.15
(ve)-.25 G .197(ral special conditions that arise when writing a memory\
 allocator for the k).15 F .196(ernel that do)-.1 F .215
(not apply to a user process memory allocator)90 322.8 R 5.215(.F)-.55 G
.215(irst, the maximum memory allocation can be determined at)-5.215 F
.029(the time that the machine is booted.)90 334.8 R .029
(This number is ne)5.029 F -.15(ve)-.25 G 2.529(rm).15 G .029
(ore than the amount of ph)-2.529 F .029(ysical memory on the)-.05 F
.382(machine, and is typically much less since a machine with all its m\
emory dedicated to the operating system)90 346.8 R .013
(is uninteresting to use.)90 358.8 R .012(Thus, the k)5.013 F .012(erne\
l can statically allocate a set of data structures to manage its dynami\
-)-.1 F 2.625(cally allocated memory)90 370.8 R 7.625(.T)-.65 G 2.625
(hese data structures ne)-7.625 F -.15(ve)-.25 G 5.125(rn).15 G 2.626
(eed to be e)-5.125 F 2.626(xpanded to accommodate memory)-.15 F 1.163
(requests; yet, if properly designed, the)90 382.8 R 3.663(yn)-.15 G
1.163(eed not be lar)-3.663 F 3.663(ge. F)-.18 F 1.163
(or a user process, the maximum amount of)-.15 F .427(memory that may b\
e allocated is a function of the maximum size of its virtual memory)90
394.8 R 5.427(.A)-.65 G .427(lthough it could)-5.427 F .005
(allocate static data structures to manage its entire virtual memory)90
406.8 R 2.505(,e)-.65 G -.15(ve)-2.755 G 2.505(ni).15 G 2.505(ft)-2.505
G(he)-2.505 E 2.505(yw)-.15 G .005(ere ef)-2.505 F .005
(\214ciently encoded the)-.25 F(y)-.15 E -.1(wo)90 418.8 S .15
(uld potentially be huge.).1 F .15(The other alternati)5.15 F .451 -.15
(ve i)-.25 H 2.651(st).15 G 2.651(oa)-2.651 G .151
(llocate data structures as the)-2.651 F 2.651(ya)-.15 G .151
(re needed.)-2.651 F(Ho)5.151 E(we)-.25 E -.15(ve)-.25 G -.4(r,).15 G
.335(that adds e)90 430.8 R .335(xtra complications such as ne)-.15 F
2.835(wf)-.25 G .335
(ailure modes if it cannot allocate space for additional structures)
-2.935 F(and additional mechanisms to link them all together)90 442.8 Q
(.)-.55 E .272(Another special condition of the k)115 458.4 R .273
(ernel memory allocator is that it can control its o)-.1 F .273
(wn address space.)-.25 F(Unlik)90 470.4 Q 2.925(eu)-.1 G .425
(ser processes that can only gro)-2.925 F 2.925(wa)-.25 G .425
(nd shrink their heap at one end, the k)-2.925 F .425(ernel can k)-.1 F
.425(eep an arena of)-.1 F -.1(ke)90 482.4 S .989(rnel addresses and al\
locate pieces from that arena which it then populates with ph).1 F .989
(ysical memory)-.05 F 5.989(.T)-.65 G(he)-5.989 E(ef)90 494.4 Q .341(fe\
ct is much the same as a user process that has parts of its address spa\
ce paged out when the)-.25 F 2.841(ya)-.15 G .34(re not in)-2.841 F .072
(use, e)90 506.4 R .072(xcept that the k)-.15 F .072(ernel can e)-.1 F
.072(xplicitly control the set of pages allocated to its address space.)
-.15 F .073(The result is)5.072 F .359(that the `)90 518.4 R(`w)-.74 E
.358(orking set')-.1 F 2.858('o)-.74 G 2.858(fp)-2.858 G .358
(ages in use by the k)-2.858 F .358(ernel e)-.1 F .358
(xactly corresponds to the set of pages that it is really)-.15 F(using.)
90 530.4 Q 2.695<418c>115 546 S .195
(nal special condition that applies to the k)-2.695 F .195
(ernel is that all of the dif)-.1 F .195(ferent uses of dynamic memory)
-.25 F .511(are kno)90 558 R .511(wn in adv)-.25 F 3.011(ance. Each)-.25
F .51(one of these uses of dynamic memory can be assigned a type.)3.011
F -.15(Fo)5.51 G 3.01(re).15 G .51(ach type)-3.01 F .234
(of dynamic memory that is allocated, the k)90 570 R .234(ernel can pro)
-.1 F .234(vide allocation limits.)-.15 F .235(One reason gi)5.235 F
-.15(ve)-.25 G 2.735(nf).15 G .235(or ha)-2.735 F(ving)-.2 E .556
(separate allocators is that no single allocator could starv)90 582 R
3.056(et)-.15 G .555(he rest of the k)-3.056 F .555(ernel of all its a)
-.1 F -.25(va)-.2 G .555(ilable memory).25 F .302
(and thus a single runa)90 594 R -.1(wa)-.15 G 2.802(yc).1 G .302
(lient could not paralyze the system.)-2.802 F .303
(By putting limits on each type of memory)5.302 F(,)-.65 E
(the single general purpose memory allocator can pro)90 606 Q
(vide the same protection ag)-.15 E(ainst memory starv)-.05 E
(ation.\207)-.25 E 1.614(Figure 1 sho)115 621.6 R 1.614
(ws the memory usage of the k)-.25 F 1.615(ernel o)-.1 F -.15(ve)-.15 G
4.115(rao).15 G 1.615(ne day period on a general timesharing)-4.115 F
2.733(machine at Berk)90 633.6 R(ele)-.1 E 6.533 -.65(y. T)-.15 H 2.733
(he `).65 F 2.733(`In Use')-.74 F 2.733(', `)-.74 F(`Free')-.74 E 2.733
(', and `)-.74 F 2.733(`Mem Use')-.74 F 5.233<278c>-.74 G 2.733
(elds are instantaneous v)-5.233 F 2.732(alues; the)-.25 F -.74(``)90
645.6 S(Requests').74 E 3.125<278c>-.74 G .625
(eld is the number of allocations since system startup; the `)-3.125 F
.625(`High Use')-.74 F 3.125<278c>-.74 G .625(eld is the maximum)-3.125
F -.25(va)90 657.6 S .62(lue of the `).25 F .62(`Mem Use')-.74 F 3.12
<278c>-.74 G .619(eld since system startup.)-3.12 F .619
(The \214gure demonstrates that most allocations are for)5.619 F .407
(small objects.)90 669.6 R(Lar)5.407 E .408
(ge allocations occur infrequently)-.18 F 2.908(,a)-.65 G .408
(nd are typically for long-li)-2.908 F -.15(ve)-.25 G 2.908(do).15 G
.408(bjects such as b)-2.908 F(uf)-.2 E(fers)-.25 E .289
(to hold the superblock for a mounted \214le system.)90 681.6 R .288
(Thus, a memory allocator only needs to be f)5.288 F .288(ast for small)
-.1 F(pieces of memory)90 693.6 Q(.)-.65 E .32 LW 162 701.6 90 701.6 DL
/F2 8/Times-Roman@0 SF .464
(\207One might seriously ask the question what good it is if `)90 713.4
R(`only')-.592 E 2.464('o)-.592 G .464(ne subsystem within the k)-2.464
F .464(ernel hangs if it is)-.08 F(something lik)90 723.4 Q 2(et)-.08 G
(he netw)-2 E(ork on a diskless w)-.08 E(orkstation.)-.08 E F0
(Summer USENIX '88)90 768 Q 100.46(297 San)119.62 F
(Francisco, June 20-24)2.5 E EP
%%Page: 298 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Design of a General Purpose Memory ...)90 48 Q
(McK)197.48 E(usick, Karels)-.15 E .4 LW 401.45 88.5 210.55 88.5 DL
(Memory statistics by b)240.6 98 Q(uck)-.2 E(et size)-.1 E 401.45 102.5
210.55 102.5 DL 401.45 104.5 210.55 104.5 DL 31.71(Size In)234.76 114 R
12.5(Use Free Requests)2.5 F 401.45 118.5 210.55 118.5 DL 18.19(128 329)
256.19 128 R 16.94(39 3129219)24.575 F 28.19(256 0)256.19 140 R 49.44
(00)29.575 G 28.19(512 4)256.19 152 R 44.44(01)29.575 G(6)-44.44 E 23.19
(1024 17)251.19 164 R 24.44(56)29.575 G(48771)-24.44 E 23.19(2048 13)
251.19 176 R 44.44(01)29.575 G(3)-44.44 E 28.19(2049\2554096 0)225.55
188 R 39.44(01)29.575 G(57)-39.44 E 28.19(4097\2558192 2)225.55 200 R
39.44(01)29.575 G(03)-39.44 E 28.19(8193\25516384 0)220.55 212 R 49.44
(00)29.575 G 28.19(16385\25532768 1)215.55 224 R 49.44(01)29.575 G
401.45 228.5 210.55 228.5 DL 401.45 88.5 401.45 228.5 DL 210.55 88.5
210.55 228.5 DL 428.07 252.5 183.93 252.5 DL(Memory statistics by type)
254.195 262 Q 428.07 266.5 183.93 266.5 DL 428.07 268.5 183.93 268.5 DL
-.8(Ty)196.275 278 S 19.845(pe In).8 F 12.5(Use Mem)2.5 F 12.5(Use High)
2.5 F 12.5(Use Requests)2.5 F 428.07 282.5 183.93 282.5 DL(mb)195.695
292 Q 34.955(uf 6)-.2 F 33.885(1K 17K)36.66 F(3099066)25.97 E(de)192.49
304 Q(vb)-.25 E 26.75(uf 13)-.2 F 33.885(53K 53K)31.66 F(13)50.97 E
(sock)193.425 316 Q 27.685(et 37)-.1 F 38.885(5K 6K)36.66 F(1275)40.97 E
33.19(pcb 55)198.93 328 R 38.885(7K 8K)36.66 F(1512)40.97 E 19.855
(routetbl 229)190.595 340 R 33.885(29K 29K)31.66 F(2424)40.97 E 32.08
(fragtbl 0)192.82 352 R 38.885(0K 1K)36.66 F(404)45.97 E 30.69(zombie 3)
191.43 364 R 38.885(1K 1K)36.66 F(24538)35.97 E 33.19(namei 0)193.93 376
R 38.885(0K 5K)36.66 F(648754)30.97 E 29.575(ioctlops 0)190.315 388 R
38.885(0K 1K)36.66 F(12)50.97 E 23.19(superblk 24)188.93 400 R 33.885
(34K 34K)31.66 F(24)50.97 E 35.41(temp 0)196.15 412 R 38.885(0K 8K)36.66
F(258)45.97 E 428.07 416.5 183.93 416.5 DL 428.07 252.5 428.07 416.5 DL
183.93 252.5 183.93 416.5 DL(\\.in 0)183.93 436 Q(\\.ce)183.93 448 Q
(\\*\(Lb)183.93 460 Q 5(.\\)-.4 G(*\(Lt)-5 E/F1 10/Times-Bold@0 SF 2.5
(5. Implementation)90 484 R(of the K)2.5 E(er)-.25 E
(nel Memory Allocator)-.15 E F0 1.158(In re)115 499.6 R(vie)-.25 E 1.158
(wing the a)-.25 F -.25(va)-.2 G 1.158
(ilable memory allocators, none of their strate).25 F 1.159
(gies could be used without some)-.15 F 2.882(modi\214cation. The)90
511.6 R -.1(ke)2.882 G .381
(rnel memory allocator that we ended up with is a h).1 F .381
(ybrid of the f)-.05 F .381(ast memory allocator)-.1 F
(found in the 4.2BSD C library and a slo)90 523.6 Q(wer b)-.25 E
(ut more-memory-ef)-.2 E(\214cient \214rst-\214t allocator)-.25 E(.)-.55
E 2.751(Small allocations are done using the 4.2BSD po)115 539.2 R(wer)
-.25 E(-of-tw)-.2 E 5.251(ol)-.1 G 2.751(ist strate)-5.251 F 2.751
(gy; the typical allocation)-.15 F .573
(requires only a computation of the list to use and the remo)90 551.2 R
-.25(va)-.15 G 3.073(lo).25 G 3.073(fa)-3.073 G 3.073(ne)-3.073 G .573
(lement if it is a)-3.073 F -.25(va)-.2 G .573(ilable, so it is quite)
.25 F -.1(fa)90 563.2 S 2.541(st. Macros).1 F .041(are pro)2.541 F .041
(vided to a)-.15 F -.2(vo)-.2 G .041(id the cost of a subroutine call.)
.2 F .041(Only if the request cannot be ful\214lled from)5.041 F 3.233
(al)90 575.2 S .733(ist is a call made to the allocator itself.)-3.233 F
2.332 -.8(To e)5.733 H .732(nsure that the allocator is al).8 F -.1(wa)
-.1 G .732(ys called for lar).1 F .732(ge requests,)-.18 F 1.019
(the lists corresponding to lar)90 587.2 R 1.019(ge allocations are al)
-.18 F -.1(wa)-.1 G 1.019(ys empty).1 F 6.019(.A)-.65 G 1.019
(ppendix A sho)-6.019 F 1.02(ws the data structures and)-.25 F
(implementation of the macros.)90 599.2 Q(Similarly)115 614.8 Q 3.706
(,f)-.65 G 1.205(reeing a block of memory can be done with a macro.)
-3.706 F 1.205(The macro computes the list on)6.205 F .429
(which to place the request and puts it there.)90 626.8 R .43
(The free routine is called only if the block of memory is con-)5.429 F
1.2(sidered to be a lar)90 638.8 R 1.2(ge allocation.)-.18 F 1.199(Incl\
uding the cost of blocking out interrupts, the allocation and freeing)
6.2 F(macros generate respecti)90 650.8 Q -.15(ve)-.25 G
(ly only nine and sixteen \(simple\) V).15 E(AX instructions.)-1.35 E
1.715(Because of the inef)115 666.4 R(\214cienc)-.25 E 4.215(yo)-.15 G
4.215(fp)-4.215 G -.25(ow)-4.215 G(er).25 E(-of-tw)-.2 E 4.215(oa)-.1 G
1.715(llocation strate)-4.215 F 1.715(gies for lar)-.15 F 1.715
(ge allocations, a dif)-.18 F(ferent)-.25 E(strate)90 678.4 Q .062
(gy is used for allocations lar)-.15 F .061(ger than tw)-.18 F 2.561(ok)
-.1 G 2.561(ilobytes. The)-2.561 F .061(selection of tw)2.561 F 2.561
(ok)-.1 G .061(ilobytes is deri)-2.561 F -.15(ve)-.25 G 2.561(df).15 G
.061(rom our)-2.561 F .796
(statistics on the utilization of memory within the k)90 690.4 R .796
(ernel, that sho)-.1 F .796(wed that 95 to 98% of allocations are of)
-.25 F .352(size one kilobyte or less.)90 702.4 R 2.851(Af)5.351 G .351
(requent caller of the memory allocator \(the name translation function\
\) al)-2.851 F -.1(wa)-.1 G(ys).1 E .944(requests a one kilobyte block.)
90 714.4 R .945(Additionally the allocation method for lar)5.944 F .945
(ge blocks is based on allocating)-.18 F 2.156
(pieces of memory in multiples of pages.)90 726.4 R 2.156
(Consequently the actual allocation size for requests of size)7.156 F
(Summer USENIX '88)90 768 Q 100.46(298 San)119.62 F
(Francisco, June 20-24)2.5 E EP
%%Page: 299 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(McK)90 48 Q(usick, Karels)-.15 E
(Design of a General Purpose Memory ...)197.48 E(2)90 84 Q/F1 10/Symbol
SF<b4>2.8 E/F2 10/Times-Italic@0 SF(pagesize)4.05 E F0 .107
(or less are identical.\207)2.787 F .107(In 4.3BSD on the V)5.107 F .107
(AX, the \(softw)-1.35 F .108(are\) page size is one kilobyte, so tw)-.1
F(o)-.1 E(kilobytes is the smallest logical cutof)90 96 Q(f.)-.25 E(Lar)
115 111.6 Q 1.144(ge allocations are \214rst rounded up to be a multipl\
e of the page size.)-.18 F 1.144(The allocator then uses a)6.144 F .111
(\214rst-\214t algorithm to \214nd space in the k)90 123.6 R .111
(ernel address arena set aside for dynamic allocations.)-.1 F .112
(Thus a request)5.112 F 1.004(for a \214v)90 135.6 R 3.504(ek)-.15 G
1.004(ilobyte piece of memory will use e)-3.504 F 1.004(xactly \214v)
-.15 F 3.504(ep)-.15 G 1.004
(ages of memory rather than eight kilobytes as)-3.504 F .696
(with the po)90 147.6 R(wer)-.25 E(-of-tw)-.2 E 3.196(oa)-.1 G .696
(llocation strate)-3.196 F(gy)-.15 E 5.696(.W)-.65 G .696(hen a lar)
-5.696 F .696(ge piece of memory is freed, the memory pages are)-.18 F
.526(returned to the free memory pool, and the address space is returne\
d to the k)90 159.6 R .525(ernel address arena where it is)-.1 F
(coalesced with adjacent free pieces.)90 171.6 Q .128
(Another technique to impro)115 187.2 R .428 -.15(ve b)-.15 H .128
(oth the ef).15 F(\214cienc)-.25 E 2.628(yo)-.15 G 2.628(fm)-2.628 G
.128(emory utilization and the speed of allocation is)-2.628 F 1.108
(to cluster same-sized small allocations on a page.)90 199.2 R 1.108
(When a list for a po)6.108 F(wer)-.25 E(-of-tw)-.2 E 3.607(oa)-.1 G
1.107(llocation is empty)-3.607 F 3.607(,a)-.65 G(ne)90 211.2 Q 2.84(wp)
-.25 G .34(age is allocated and di)-2.84 F .341
(vided into pieces of the needed size.)-.25 F .341(This strate)5.341 F
.341(gy speeds future allocations as)-.15 F(se)90 223.2 Q -.15(ve)-.25 G
(ral pieces of memory become a).15 E -.25(va)-.2 G
(ilable as a result of the call into the allocator).25 E(.)-.55 E -.1
(ke)178.765 258.76 S(rnel memory pages).1 E(Le)110.41 301.96 Q(gend:)
-.15 E(cont \255 continuation of pre)120.96 325 Q(vious page)-.25 E
(free \255 unused page)120.96 313.48 Q(Usage:)111.395 343 Q
(memsize\(addr\))126.72 354.52 Q(char *addr;)148.32 365.32 Q({)126.72
374.68 Q(return\(kmemsizes[\(addr \255 kmembase\) \255)148.32 384.76 Q
/F3 9/Times-Roman@0 SF -.954 -.828(PA G)2.5 H(ESIZE).828 E F0(]\);)A(})
126.72 399.88 Q .4 LW 495.36 276.72 495.36 265.2 DL 495.36 270.96 495.36
270.96 DL 499.176 270.96 499.176 270.96 DL 503.064 270.96 503.064 270.96
DL 506.88 270.96 506.88 270.96 DL 510.696 270.96 510.696 270.96 DL
514.584 270.96 514.584 270.96 DL 518.4 270.96 518.4 270.96 DL(1024,)
173.07 284.68 Q(256,)198.61 284.68 Q(512,)221.65 284.68 Q(3072,)242.19
284.68 Q(cont,)289.66 284.68 Q(cont,)266.62 284.68 Q(128,)313.81 284.68
Q(128,)336.85 284.68 Q(free,)359.62 284.68 Q(cont,)381.82 284.68 Q(128,)
405.97 284.68 Q(1024,)426.51 284.68 Q(free,)451.78 284.68 Q(cont,)473.98
284.68 Q(cont,)497.02 284.68 Q 195.84 270.96 172.8 270.96 DL 172.8
276.72 172.8 265.2 DL 201.6 273.84 201.6 268.08 DL 207.36 273.84 207.36
268.08 DL 213.12 273.84 213.12 268.08 DL 218.88 270.96 195.84 270.96 DL
195.84 276.72 195.84 265.2 DL 229.68 273.84 229.68 268.08 DL 241.2
270.96 218.88 270.96 DL 218.88 276.72 218.88 265.2 DL 264.96 270.96
241.92 270.96 DL 241.92 276.72 241.92 265.2 DL 288 270.96 264.96 270.96
DL 264.96 276.72 264.96 265.2 DL 311.04 270.96 288 270.96 DL 288 276.72
288 265.2 DL 313.92 273.84 313.92 268.08 DL 316.8 273.84 316.8 268.08 DL
319.68 273.84 319.68 268.08 DL 322.56 273.84 322.56 268.08 DL 325.44
273.84 325.44 268.08 DL 328.32 273.84 328.32 268.08 DL 331.2 273.84
331.2 268.08 DL 311.04 276.72 311.04 265.2 DL 334.08 270.96 311.04
270.96 DL 336.96 273.84 336.96 268.08 DL 339.84 273.84 339.84 268.08 DL
342.72 273.84 342.72 268.08 DL 345.6 273.84 345.6 268.08 DL 348.48
273.84 348.48 268.08 DL 351.36 273.84 351.36 268.08 DL 354.24 273.84
354.24 268.08 DL 334.08 276.72 334.08 265.2 DL 357.12 270.96 334.08
270.96 DL 380.16 270.96 357.12 270.96 DL 357.12 276.72 357.12 265.2 DL
403.2 270.96 380.16 270.96 DL 380.16 276.72 380.16 265.2 DL 406.08
273.84 406.08 268.08 DL 408.96 273.84 408.96 268.08 DL 411.84 273.84
411.84 268.08 DL 414.72 273.84 414.72 268.08 DL 417.6 273.84 417.6
268.08 DL 420.48 273.84 420.48 268.08 DL 423.36 273.84 423.36 268.08 DL
403.2 276.72 403.2 265.2 DL 426.24 270.96 403.2 270.96 DL 449.28 270.96
426.24 270.96 DL 426.24 276.72 426.24 265.2 DL 472.32 270.96 449.28
270.96 DL 449.28 276.72 449.28 265.2 DL 495.36 270.96 472.32 270.96 DL
472.32 276.72 472.32 265.2 DL(kmemsizes[] = {)106.26 284.68 Q
(char *kmembase)103.16 273.16 Q(\\.in 0 \\.ce \\*\(Lb)93.6 432.44 Q 5
(.\\)-.4 G(*\(Lt)-5 E .692(Because the size is not speci\214ed when a b\
lock of memory is freed, the allocator must k)115 456.44 R .692
(eep track of)-.1 F .287(the sizes of the pieces it has handed out.)90
468.44 R .287(The 4.2BSD user)5.287 F(-le)-.2 E -.15(ve)-.25 G 2.787(la)
.15 G .287(llocator stores the size of each block in a)-2.787 F .937
(header just before the allocation.)90 480.44 R(Ho)5.936 E(we)-.25 E
-.15(ve)-.25 G 1.736 -.4(r, t).15 H .936(his strate).4 F .936
(gy doubles the memory requirement for allocations)-.15 F 1.178
(that require a po)90 492.44 R(wer)-.25 E(-of-tw)-.2 E 1.178
(o-sized block.)-.1 F 1.178
(Therefore, instead of storing the size of each piece of memory)6.178 F
.144(with the piece itself, the size information is associated with the\
 memory page.)90 504.44 R .143(Figure 2 sho)5.143 F .143(ws ho)-.25 F
2.643(wt)-.25 G .143(he k)-2.643 F(er)-.1 E(-)-.2 E .132(nel determines\
 the size of a piece of memory that is being freed, by calculating the \
page in which it resides,)90 516.44 R .271
(and looking up the size associated with that page.)90 528.44 R .271
(Eliminating the cost of the o)5.271 F -.15(ve)-.15 G .271
(rhead per piece impro).15 F -.15(ve)-.15 G(d).15 E .112(utilization f)
90 540.44 R .112(ar more than e)-.1 F 2.613(xpected. The)-.15 F .113
(reason is that man)2.613 F 2.613(ya)-.15 G .113(llocations in the k)
-2.613 F .113(ernel are for blocks of mem-)-.1 F .161
(ory whose size is e)90 552.44 R .161(xactly a po)-.15 F .161(wer of tw)
-.25 F 2.661(o. These)-.1 F .16(requests w)2.661 F .16
(ould be nearly doubled if the user)-.1 F(-le)-.2 E -.15(ve)-.25 G 2.66
(ls).15 G(trate)-2.66 E(gy)-.15 E(were used.)90 564.44 Q(No)5 E 2.5(wt)
-.25 G(he)-2.5 E 2.5(yc)-.15 G(an be accommodated with no w)-2.5 E
(asted memory)-.1 E(.)-.65 E .353
(The allocator can be called both from the top half of the k)115 580.04
R .353(ernel, which is willing to w)-.1 F .354(ait for memory)-.1 F .969
(to become a)90 592.04 R -.25(va)-.2 G .969
(ilable, and from the interrupt routines in the bottom half of the k).25
F .969(ernel that cannot w)-.1 F .968(ait for)-.1 F .331
(memory to become a)90 604.04 R -.25(va)-.2 G 2.831(ilable. Clients).25
F .332(indicate their willingness \(and ability\) to w)2.832 F .332
(ait with a \215ag to the allo-)-.1 F .389(cation routine.)90 616.04 R
-.15(Fo)5.389 G 2.888(rc).15 G .388(lients that are willing to w)-2.888
F .388(ait, the allocator guarrentees that their request will succeed.)
-.1 F .078(Thus, these clients can need not check the return v)90 628.04
R .078(alue from the allocator)-.25 F 5.078(.I)-.55 G 2.578(fm)-5.078 G
.078(emory is una)-2.578 F -.25(va)-.2 G .078(ilable and the).25 F 1.206
(client cannot w)90 640.04 R 1.206
(ait, the allocator returns a null pointer)-.1 F 6.205(.T)-.55 G 1.205
(hese clients must be prepared to cope with this)-6.205 F
(\(hopefully infrequent\) condition \(usually by gi)90 652.04 Q
(ving up and hoping to do better later\).)-.25 E .32 LW 162 668.2 90
668.2 DL/F4 8/Times-Roman@0 SF<8754>90 680 Q 2.051(ou)-.64 G .051
(nderstand wh)-2.051 F 2.051(yt)-.04 G .051(his number is 2)-2.051 F/F5
8/Symbol SF<b4>2.24 E/F6 8/Times-Italic@0 SF(pagesize)3.24 E F4 .051
(one observ)2.195 F .052(es that the po)-.12 F(wer)-.2 E(-of-tw)-.16 E
2.052(oa)-.08 G .052(lgorithm yields sizes of 1,)-2.052 F .23
(2, 4, 8, ...)90 690 R .23(pages while the lar)4.23 F .23(ge block algo\
rithm that allocates in multiples of pages yields sizes of 1, 2, 3, 4, \
...)-.144 F 2.606(pages. Thus)90 700 R .607
(for allocations of sizes between one and tw)2.606 F 2.607(op)-.08 G
.607(ages both algorithms use tw)-2.607 F 2.607(op)-.08 G .607
(ages; it is not until)-2.607 F .702(allocations of sizes between tw)90
710 R 2.702(oa)-.08 G .701(nd three pages that a dif)-2.702 F .701
(ference emer)-.2 F .701(ges where the po)-.144 F(wer)-.2 E(-of-tw)-.16
E 2.701(oa)-.08 G(lgorithm)-2.701 E(will use four pages while the lar)90
720 Q(ge block algorithm will use three pages.)-.144 E F0
(Summer USENIX '88)90 768 Q 100.46(299 San)119.62 F
(Francisco, June 20-24)2.5 E EP
%%Page: 300 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Design of a General Purpose Memory ...)90 48 Q
(McK)197.48 E(usick, Karels)-.15 E/F1 10/Times-Bold@0 SF 2.5(6. Results)
90 84 R(of the Implementation)2.5 E F0 .772(The ne)115 99.6 R 3.272(wm)
-.25 G .772(emory allocator w)-3.272 F .773
(as written about a year ago.)-.1 F(Con)5.773 E -.15(ve)-.4 G .773
(rsion from the old memory alloca-).15 F .767(tors to the ne)90 111.6 R
3.267(wa)-.25 G .767(llocator has been going on e)-3.267 F -.15(ve)-.25
G 3.267(rs).15 G 3.267(ince. Man)-3.267 F 3.267(yo)-.15 G 3.266(ft)
-3.267 G .766(he special purpose allocators ha)-3.266 F 1.066 -.15(ve b)
-.2 H(een).15 E 3.3(eliminated. This)90 123.6 R .8(list includes)3.3 F
/F2 10/Times-Italic@0 SF(calloc)3.3 E F0 .416(\(\)).833 G(,)-.416 E F2
(wmemall)3.3 E F0 .416(\(\)).833 G 3.3(,a)-.416 G(nd)-3.3 E F2(zmemall)
3.3 E F0 .416(\(\)).833 G 5.8(.M)-.416 G(an)-5.8 E 3.3(yo)-.15 G 3.3(ft)
-3.3 G .801(he special purpose memory)-3.3 F 1.005(allocators b)90 135.6
R 1.005(uilt on top of other allocators ha)-.2 F 1.304 -.15(ve a)-.2 H
1.004(lso been eliminated.).15 F -.15(Fo)6.004 G 3.504(re).15 G 1.004
(xample, the allocator that w)-3.654 F(as)-.1 E -.2(bu)90 147.6 S .749
(ilt on top of the b).2 F(uf)-.2 E .749(fer pool allocator)-.25 F F2 -.1
(ge)3.249 G(teblk).1 E F0 -.083 .416(\(\) t).833 H 3.249(oa)-.416 G .749
(llocate pathname b)-3.249 F(uf)-.2 E .749(fers in)-.25 F F2(namei)3.249
E F0 -.083 .416(\(\) h).833 H .749(as been elimi-)-.416 F 3.274
(nated. Because)90 159.6 R .774(the typical allocation is so f)3.274 F
.773(ast, we ha)-.1 F 1.073 -.15(ve f)-.2 H .773
(ound that none of the special purpose pools are).15 F 2.637
(needed. Indeed,)90 171.6 R .137
(the allocation is about the same as the pre)2.637 F .137
(vious cost of allocating b)-.25 F(uf)-.2 E .137(fers from the netw)-.25
F(ork)-.1 E .192(pool \()90 183.6 R F2(mb)A(uf)-.2 E F0 2.692
(s\). Consequently).833 F .191(applications that used to allocate netw)
2.691 F .191(ork b)-.1 F(uf)-.2 E .191(fers for their o)-.25 F .191
(wn uses ha)-.25 F .491 -.15(ve b)-.2 H(een).15 E(switched o)90 195.6 Q
-.15(ve)-.15 G 2.5(rt).15 G 2.5(ou)-2.5 G(sing the general purpose allo\
cator without increasing their running time.)-2.5 E .562
(Quantifying the performance of the allocator is dif)115 211.2 R .562
(\214cult because it is hard to measure the amount of)-.25 F .281
(time spent allocating and freeing memory in the k)90 223.2 R 2.781
(ernel. The)-.1 F .281(usual approach is to compile a k)2.781 F .281
(ernel for pro-)-.1 F .519(\214ling and then compare the running time o\
f the routines that implemented the old abstraction v)90 235.2 R .519
(ersus those)-.15 F 1.317(that implement the ne)90 247.2 R 3.817(wo)-.25
G 3.817(ne. The)-3.817 F 1.317(old routines are dif)3.817 F 1.316
(\214cult to quantify because indi)-.25 F 1.316(vidual routines were)
-.25 F .339(used for more than one purpose.)90 259.2 R -.15(Fo)5.339 G
2.839(re).15 G .339(xample, the)-2.989 F F2 -.1(ge)2.839 G(teblk).1 E F0
-.492 .416(\(\) r).833 H .34(outine w)-.416 F .34
(as used both to allocate one kilobyte)-.1 F 1.12
(memory blocks and for its intended purpose of pro)90 271.2 R 1.12
(viding b)-.15 F(uf)-.2 E 1.12(fers to the \214lesystem.)-.25 F(Dif)6.12
E 1.12(ferentiating these)-.25 F .367(uses is often dif)90 283.2 R 2.867
(\214cult. T)-.25 F 2.867(og)-.8 G .367
(et a measure of the cost of memory allocation before putting in our ne)
-2.867 F 2.868(wa)-.25 G(lloca-)-2.868 E(tor)90 295.2 Q 3.35(,w)-.4 G
3.35(es)-3.35 G .85
(ummed up the running time of all the routines whose e)-3.35 F(xclusi)
-.15 E 1.15 -.15(ve t)-.25 H .85(ask w).15 F .85(as memory allocation.)
-.1 F -.8(To)5.85 G .176(this total we added the fraction of the runnin\
g time of the multi-purpose routines that could clearly be iden-)90
307.2 R .321(ti\214ed as memory allocation usage.)90 319.2 R .321
(This number sho)5.321 F .32
(wed that approximately three percent of the time spent)-.25 F(in the k)
90 331.2 Q(ernel could be accounted to memory allocation.)-.1 E 1.063
(The ne)115 346.8 R 3.563(wa)-.25 G 1.063(llocator is dif)-3.563 F 1.064
(\214cult to measure because the usual case of the memory allocator is \
imple-)-.25 F .313(mented as a macro.)90 358.8 R .312(Thus, its running\
 time is a small fraction of the running time of the numerous routines)
5.312 F .207(in the k)90 370.8 R .207(ernel that use it.)-.1 F 1.807 -.8
(To g)5.207 H .207(et a bound on the cost, we changed the macro al).8 F
-.1(wa)-.1 G .208(ys to call the memory allo-).1 F .546(cation routine.)
90 382.8 R .545(Running in this mode, the memory allocator accounted fo\
r six percent of the time spent in)5.546 F .53(the k)90 394.8 R 3.03
(ernel. F)-.1 F .53(actoring out the cost of the statistics collection \
and the subroutine call o)-.15 F -.15(ve)-.15 G .53(rhead for the cases)
.15 F .26(that could normally be handled by the macro, we estimate that\
 the allocator w)90 406.8 R .259(ould account for at most four)-.1 F
.548(percent of time in the k)90 418.8 R 3.049(ernel. These)-.1 F .549
(measurements sho)3.049 F 3.049(wt)-.25 G .549(hat the ne)-3.049 F 3.049
(wa)-.25 G .549(llocator does not introduce signi\214-)-3.049 F(cant ne)
90 430.8 Q 2.5(wr)-.25 G(un-time costs.)-2.5 E .01
(The other major success has been in k)115 446.4 R .01
(eeping the size information on a per)-.1 F .01(-page basis.)-.2 F .01
(This technique)5.01 F(allo)90 458.4 Q 1.297
(ws the most frequently requested sizes to be allocated without w)-.25 F
3.797(aste. It)-.1 F 1.297(also reduces the amount of)3.797 F(bookk)90
470.4 Q 1.399(eeping information associated with the allocator to four \
kilobytes of information per me)-.1 F -.05(ga)-.15 G 1.399(byte of).05 F
(memory under management \(with a one kilobyte page size\).)90 482.4 Q
F1 2.5(7. Futur)90 506.4 R 2.5(eW)-.18 G(ork)-3.25 E F0 1.264(Our ne)115
522 R 1.264(xt project is to con)-.15 F -.15(ve)-.4 G 1.264(rt man).15 F
3.764(yo)-.15 G 3.764(ft)-3.764 G 1.264(he static k)-3.764 F 1.265
(ernel tables to be dynamically allocated.)-.1 F(Static)6.265 E .321(ta\
bles include the process table, the \214le table, and the mount table.)
90 534 R .321(Making these tables dynamic will ha)5.321 F -.15(ve)-.2 G
(tw)90 546 Q 2.602(ob)-.1 G 2.602(ene\214ts. First,)-2.602 F .103(it wi\
ll reduce the amount of memory that must be statically allocated at boo\
t time.)2.602 F(Sec-)5.103 E .374(ond, it will eliminate the arbitrary \
upper limit imposed by the current static sizing \(although a limit wil\
l be)90 558 R .167(retained to constrain runa)90 570 R -.1(wa)-.15 G
2.667(yc).1 G 2.668(lients\). Other)-2.667 F .168(researchers ha)2.668 F
.468 -.15(ve a)-.2 H .168(lready sho).15 F .168(wn the memory sa)-.25 F
.168(vings achie)-.2 F -.15(ve)-.25 G(d).15 E(by this con)90 582 Q -.15
(ve)-.4 G(rsion [Rodriguez88].).15 E .951
(Under the current implementation, memory is ne)115 597.6 R -.15(ve)-.25
G 3.451(rm).15 G -.15(ove)-3.451 G 3.451(df).15 G .95
(rom one size list to another)-3.451 F 5.95(.W)-.55 G .95(ith the)-6.35
F .439
(4.2BSD memory allocator this causes problems, particularly for lar)90
609.6 R .44(ge allocations where a process may use)-.18 F 2.947(aq)90
621.6 S .447(uarter me)-2.947 F -.05(ga)-.15 G .447
(byte piece of memory once, which is then ne).05 F -.15(ve)-.25 G 2.947
(ra).15 G -.25(va)-3.147 G .447(ilable for an).25 F 2.946(yo)-.15 G .446
(ther size request.)-2.946 F .446(In our)5.446 F -.05(hy)90 633.6 S .84
(brid scheme, memory can be shuf).05 F .84(\215ed between lar)-.25 F .84
(ge requests so that lar)-.18 F .84(ge blocks of memory are ne)-.18 F
-.15(ve)-.25 G(r).15 E .942(stranded as the)90 645.6 R 3.442(ya)-.15 G
.942(re with the 4.2BSD allocator)-3.442 F 5.941(.H)-.55 G -.25(ow)
-5.941 G -2.15 -.25(ev e).25 H 1.741 -.4(r, p).25 H .941
(ages allocated to small requests are allocated).4 F .729
(once to a particular size and ne)90 657.6 R -.15(ve)-.25 G 3.229(rc).15
G .729(hanged thereafter)-3.229 F 5.729(.I)-.55 G 3.229(fab)-5.729 G
.729(urst of requests came in for a particular size,)-3.429 F 2.214
(that size w)90 669.6 R 2.214(ould acquire a lar)-.1 F 2.214
(ge amount of memory that w)-.18 F 2.213(ould then not be a)-.1 F -.25
(va)-.2 G 2.213(ilable for other future).25 F(requests.)90 681.6 Q .365
(In practice, we do not \214nd that the free lists become too lar)115
697.2 R 2.866(ge. Ho)-.18 F(we)-.25 E -.15(ve)-.25 G 1.166 -.4(r, w).15
H 2.866(eh).4 G -2.25 -.2(av e)-2.866 H .366(been in)3.066 F -.15(ve)-.4
G(stig).15 E(ating)-.05 E -.1(wa)90 709.2 S .526
(ys to handle such problems if the).1 F 3.026(yo)-.15 G .526
(ccur in the future.)-3.026 F .526(Our current in)5.526 F -.15(ve)-.4 G
(stig).15 E .526(ations in)-.05 F -.2(vo)-.4 G(lv).2 E 3.026(ea)-.15 G
.525(routine that)-.001 F .149(can run as part of the idle loop that w)
90 721.2 R .15(ould sort the elements on each of the free lists into or\
der of increasing)-.1 F(Summer USENIX '88)90 768 Q 100.46(300 San)119.62
F(Francisco, June 20-24)2.5 E EP
%%Page: 301 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(McK)90 48 Q(usick, Karels)-.15 E
(Design of a General Purpose Memory ...)197.48 E 3.787(address. Since)90
84 R(an)3.787 E 3.787(yg)-.15 G -2.15 -.25(iv e)-3.787 H 3.787(np).25 G
1.287(age has only one size of elements allocated from it, the ef)-3.787
F 1.286(fect of the sorting)-.25 F -.1(wo)90 96 S .024
(uld be to sort the list into distinct pages.).1 F .024
(When all the pieces of a page became free, the page itself could)5.024
F .031(be released back to the free pool so that it could be allocated \
to another purpose.)90 108 R .031(Although there is no guar)5.031 F(-)
-.2 E .347(antee that all the pieces of a page w)90 120 R .347(ould e)
-.1 F -.15(ve)-.25 G 2.847(rb).15 G 2.847(ef)-2.847 G .348
(reed, most allocations are short-li)-2.847 F -.15(ve)-.25 G .348
(d, lasting only for the).15 F .025
(duration of an open \214le descriptor)90 132 R 2.525(,a)-.4 G 2.525(no)
-2.525 G .025(pen netw)-2.525 F .025(ork connection, or a system call.)
-.1 F .024(As ne)5.024 F 2.524(wa)-.25 G .024(llocations w)-2.524 F
(ould)-.1 E .176(be made from the page sorted to the front of the list,\
 return of elements from pages at the back w)90 144 R .177(ould e)-.1 F
-.15(ve)-.25 G(n-).15 E(tually allo)90 156 Q 2.5(wp)-.25 G
(ages later in the list to be freed.)-2.5 E -1 -.8(Tw o)115 171.6 T .569
(of the traditional UNIX memory allocators remain in the current system\
.)3.869 F .568(The terminal subsys-)5.568 F .808(tem uses)90 183.6 R/F1
10/Times-Italic@0 SF(clist)3.308 E F0 3.308(s\().833 G .808
(character lists\).)-3.308 F .809(That part of the system is e)5.808 F
.809(xpected to under)-.15 F .809(go major re)-.18 F .809
(vision within the)-.25 F(ne)90 195.6 Q .326
(xt year or so, and it will probably be changed to use)-.15 F F1(mb)
2.826 E(uf)-.2 E F0 2.826(sa).833 G 2.826(si)-2.826 G 2.826(ti)-2.826 G
2.826(sm)-2.826 G(er)-2.826 E .326(ged into the netw)-.18 F .326
(ork system.)-.1 F(The)5.326 E .609
(other major allocator that remains is)90 207.6 R F1 -.1(ge)3.109 G
(tblk).1 E F0 .416(\(\)).833 G 3.109(,t)-.416 G .61
(he routine that manages the \214lesystem b)-3.109 F(uf)-.2 E .61
(fer pool memory)-.25 F .301(and associated control information.)90
219.6 R .301(Only the \214lesystem uses)5.301 F F1 -.1(ge)2.801 G(tblk)
.1 E F0 -.531 .416(\(\) i).833 H 2.801(nt)-.416 G .3
(he current system; it manages the)-2.801 F .43(constant-sized b)90
231.6 R(uf)-.2 E .43(fer pool.)-.25 F 2.03 -.8(We p)5.43 H .43
(lan to mer).8 F .43(ge the \214lesystem b)-.18 F(uf)-.2 E .43
(fer cache into the virtual memory system')-.25 F(s)-.55 E 1.186
(page cache in the future.)90 243.6 R 1.185(This change will allo)6.186
F 3.685(wt)-.25 G 1.185(he size of the b)-3.685 F(uf)-.2 E 1.185
(fer pool to be changed according to)-.25 F(memory load, b)90 255.6 Q
(ut will require a polic)-.2 E 2.5(yf)-.15 G
(or balancing memory needs with \214lesystem cache performance.)-2.5 E
/F2 10/Times-Bold@0 SF 2.5(8. Ackno)90 279.6 R(wledgments)-.1 E F0 .742
(In the spirit of community support, we ha)115 295.2 R 1.042 -.15(ve m)
-.2 H .742(ade v).15 F .742(arious v)-.25 F .742
(ersions of our allocator a)-.15 F -.25(va)-.2 G .742(ilable to our).25
F .669(test sites.)90 307.2 R(The)5.669 E 3.169(yh)-.15 G -2.25 -.2
(av e)-3.169 H .669(been b)3.369 F .669(usily b)-.2 F .669
(urning it in and gi)-.2 F .669(ving us feedback on their e)-.25 F 3.168
(xperiences. W)-.15 F 3.168(ea)-.8 G(ckno)-3.168 E(wl-)-.25 E .899
(edge their in)90 319.2 R -.25(va)-.4 G .899(luable input.).25 F .899(T\
he feedback from the Usenix program committee on the initial draft of o\
ur)5.899 F(paper suggested numerous important impro)90 331.2 Q -.15(ve)
-.15 G(ments.).15 E F2 2.5(9. Refer)90 355.2 R(ences)-.18 E F0 -.35(Ko)
90 374.4 S 28.96(rn85 Da).35 F .704(vid K)-.2 F .703(orn, Kiem-Phong V)
-.35 F .703(o, `)-1.29 F .703(`In Search of a Better Malloc')-.74 F(')
-.74 E F1(Pr)3.203 E .703(oceedings of the P)-.45 F(ortland)-.8 E
(Usenix Confer)151.66 386.4 Q(ence)-.37 E F0 2.5(,p)C 2.5(p4)-2.5 G
(89-506, June 1985.)-2.5 E(McK)90 402 Q 7.65(usick85 M.)-.15 F(McK)2.837
E .337(usick, M. Karels, S. Lef)-.15 F(\215er)-.25 E 2.837(,`)-.4 G .337
(`Performance Impro)-3.577 F -.15(ve)-.15 G .337
(ments and Functional Enhance-).15 F .32(ments in 4.3BSD')151.66 414 R
(')-.74 E F1(Pr)2.82 E .32(oceedings of the P)-.45 F .32
(ortland Usenix Confer)-.8 F(ence)-.37 E F0 2.82(,p)C 2.82(p5)-2.82 G
.32(19-531, June 1985.)-2.82 F 7.5(Rodriguez88 Robert)90 429.6 R .688
(Rodriguez, Matt K)3.188 F(oehler)-.35 E 3.188(,L)-.4 G .688(arry P)
-3.188 F(almer)-.15 E 3.188(,R)-.4 G(ick)-3.188 E 3.188(yP)-.15 G(almer)
-3.338 E 3.188(,`)-.4 G 2.288 -.8(`A D)-3.928 H .689
(ynamic UNIX Operat-).8 F(ing System')151.66 441.6 Q(')-.74 E F1(Pr)2.5
E(oceedings of the San F)-.45 E -.15(ra)-.55 G(ncisco Usenix Confer).15
E(ence)-.37 E F0 2.5(,J)C(une 1988.)-2.5 E 6.38(Thompson78 K)90 457.2 R
.447(en Thompson, `)-.25 F .447(`UNIX Implementation')-.74 F(')-.74 E F1
.447(Bell System T)2.947 F(ec)-.92 E .447(hnical J)-.15 F(ournal)-.25 E
F0 2.947(,v)C .447(olume 57, num-)-3.147 F(ber 6, pp 1931-1946, 1978.)
151.66 467.2 Q(Summer USENIX '88)90 768 Q 100.46(301 San)119.62 F
(Francisco, June 20-24)2.5 E EP
%%Page: 302 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Design of a General Purpose Memory ...)90 48 Q
(McK)197.48 E(usick, Karels)-.15 E/F1 10/Times-Bold@0 SF -4.998(11)90 84
S -4.998(00)4.998 G 12.078 -2.498(.. A)4.998 H -.25(Ap)-4.72 G(pp)-5.308
E(pe)-5.558 E(en)-4.438 E(nd)-5.558 E(di)-5.558 E(ix)-2.778 E 4.791(xA)
-4.998 G 4.791(A-)-12.009 G 4.791(-I)-8.119 G(Im)-8.679 E(mp)-8.328 E
(pl)-5.558 E(le)-2.778 E(em)-4.438 E(me)-8.328 E(en)-4.438 E(nt)-5.558 E
(ta)-3.328 E(at)-4.998 E(ti)-3.328 E(io)-2.778 E(on)-4.998 E 4.791(nD)
-5.558 G(De)-12.009 E(et)-4.438 E(ta)-3.328 E(ai)-4.998 E(il)-2.778 E
(ls)-2.778 E(s)-3.888 E/F2 10/Times-Italic@0 SF(/*)92.011 99.6 Q 4.791
(*C)94.791 111.6 S 2.291(onstants for setting the par)-4.791 F(ameter)
-.15 E 4.791(so)-.1 G 4.791(ft)-4.791 G 2.291(he k)-4.791 F 2.291
(ernel memory allocator.)-.1 F(*)94.791 123.6 Q 4.791(*2*)94.791 135.6 S
4.791(*M)-4.791 G(INB)-4.791 E 2.291
(UCKET is the smallest unit of memory that will be)-.1 F 4.791(*a)94.791
147.6 S 2.291(llocated. It must be at least lar)-4.791 F 2.491 -.1(ge e)
-.37 H 2.291(nough to hold a pointer.).1 F(*)94.791 159.6 Q 4.791(*U)
94.791 171.6 S 2.291(nits of memory less or equal to MAXALLOCSA)-4.791 F
2.291(VE will permanently)-1.05 F 4.791(*a)94.791 183.6 S 2.291
(llocate physical memory; r)-4.791 F 2.291
(equests for these size pieces of memory)-.37 F 4.791(*a)94.791 195.6 S
3.031 -.37(re q)-4.791 H 2.291(uite fast. Allocations gr).37 F 2.291
(eater than MAXALLOCSA)-.37 F 2.291(VE must)-1.05 F 4.791(*a)94.791
207.6 S 2.291(lways allocate and fr)-4.791 F 2.291
(ee physical memory; r)-.37 F 2.291(equests for these size)-.37 F 4.791
(*a)94.791 219.6 S 2.291(llocations should be done infr)-4.791 F 2.291
(equently as the)-.37 F 4.791(yw)-.3 G 2.291(ill be slow.)-4.791 F 4.791
(*C)94.791 231.6 S(onstr)-4.791 E 2.291(aints: CLBYTES <= MAXALLOCSA)
-.15 F 2.291(VE <= 2 ** \(MINB)-1.05 F 2.291(UCKET + 14\))-.1 F 4.791
(*a)94.791 243.6 S 2.291(nd MAXALLOCSIZE must be a power of two.)-4.791
F 2.011(*/)94.791 255.6 S F1 -4.998(##)90 267.6 S -5.558(dd)4.998 G
-4.438(ee)5.558 G 3.906 -3.328(ff i)4.438 H(in).55 E(ne)-5.558 E(e)
-4.438 E F0(MINB)4.791 E 57.495(UCKET 4)-.1 F F2 2.291
(/* 4 => min allocation of 16 bytes *)97.011 F(/)2.011 E/F3 14
/Times-Italic@0 SF(MAXALLOCSA)418.47 279.6 Q(VE)-1.47 E F1 -4.998(##)
-432 G -5.558(dd)4.998 G -4.438(ee)5.558 G 3.906 -3.328(ff i)4.438 H(in)
.55 E(ne)-5.558 E(e)-4.438 E F0(MAXALLOCSA)4.791 E 35.415(VE \(2)-1.35 F
F2(*)4.791 E F0(CLBYTES\))4.791 E F2(/*)92.011 303.6 Q 4.791(*M)94.791
315.6 S 2.291(aximum amount of k)-4.791 F 2.291(ernel dynamic memory.)
-.1 F 4.791(*C)94.791 327.6 S(onstr)-4.791 E 2.291
(aints: must be a multiple of the pa)-.15 F -.1(ge)-.1 G(size.).1 E
2.011(*/)94.791 339.6 S F3(MAXKMEM)452.014 351.6 Q F1 -4.998(##)-432 G
-5.558(dd)4.998 G -4.438(ee)5.558 G 3.906 -3.328(ff i)4.438 H(in).55 E
(ne)-5.558 E(e)-4.438 E F0 62.395(MAXKMEM \(1024)4.791 F F2(*)4.791 E F0
-1.06 -.92(PA G)4.791 H(ESIZE\)).92 E F2(/*)92.011 375.6 Q 4.791(*A)
94.791 387.6 S -.37(re)-4.791 G 2.291(na for all k).37 F 2.291
(ernel dynamic memory allocation.)-.1 F 4.791(*T)94.791 399.6 S 2.291
(his ar)-4.791 F 2.291(ena is known to start on a pa)-.37 F 2.491 -.1
(ge b)-.1 H(oundary.).1 E 2.011(*/)94.791 411.6 S F1 -4.438(ee)90 423.6
S -4.998(xx)4.438 G -3.328(tt)4.998 G -4.438(ee)3.328 G 6.226 -4.438
(rr n)4.438 H 4.791(nc)-1.12 G(ch)-9.229 E(ha)-5.558 E(ar)-4.998 E(r)
-4.438 E F0(kmembase[MAXKMEM];)4.791 E F2(/*)92.011 447.6 Q 4.791(*A)
94.791 459.6 S(rr)-4.791 E 2.291(ay of descriptor)-.15 F 4.791(st)-.1 G
2.291(hat describe the contents of eac)-4.791 F 4.791(hp)-.15 G -.1(age)
-4.791 G 2.011(*/)94.791 471.6 S F1 -3.888(ss)90 483.6 S -3.328(tt)3.888
G -4.438(rr)3.328 G -5.558(uu)4.438 G -4.438(cc)5.558 G -3.328(tt)4.438
G F0(kmemsizes)8.119 E F1 -3.938({{)4.791 G -3.888(ss)145 495.6 S -5.558
(hh)3.888 G -4.998(oo)5.558 G -4.438(rr)4.998 G -3.328(tt)4.438 G F0(ks)
31.098 E/F4 10/Symbol SF(-)5 I F0(indx;)-5 I F2 2.291(/* b)67.071 F(uc)
-.2 E -.1(ke)-.2 G 4.791(ti).1 G(nde)-4.791 E 2.291
(x, size of small allocations *)-.2 F(/)2.011 E F0(u)145 507.6 Q F4(-)5
I F0 17.01(short ks)-5 J F4(-)5 I F0(pagecnt;)-5 I F2 2.291(/* for lar)
53.751 F 2.491 -.1(ge a)-.37 H 2.291(llocations, pa).1 F -.1(ge)-.1 G
4.791(sa).1 G 2.291(llocated *)-4.791 F(/)2.011 E F1 -3.938(}})90 519.6
S F0(kmemsizes[MAXKMEM)8.729 E F2(/)6.802 E F0 -1.06 -.92(PA G)4.791 H
(ESIZE];).92 E F2(/*)92.011 543.6 Q 4.791(*S)94.791 555.6 S 2.291
(et of b)-4.791 F(uc)-.2 E -.1(ke)-.2 G 2.291(ts for eac).1 F 4.791(hs)
-.15 G 2.291(ize of memory bloc)-4.791 F 4.791(kt)-.2 G 2.291(hat is r)
-4.791 F(etained)-.37 E 2.011(*/)94.791 567.6 S F1 -3.888(ss)90 579.6 S
-3.328(tt)3.888 G -4.438(rr)3.328 G -5.558(uu)4.438 G -4.438(cc)5.558 G
-3.328(tt)4.438 G F0(kmemb)8.119 E(uck)-.2 E(ets)-.1 E F1 -3.938({{)
4.791 G F0(caddr)145 591.6 Q F4(-)5 I F0 4.791(tk)-5 K(b)-4.791 E F4(-)5
I F0(ne)-5 I(xt;)-.15 E F2 2.291(/* list of fr)81.4 F 2.291(ee bloc)-.37
F 2.291(ks *)-.2 F(/)2.011 E F1 -3.938(}})90 603.6 S F0 -.2(bu)8.729 G
(ck).2 E(et[MINB)-.1 E 2.291(UCKET + 16];)-.1 F(Summer USENIX '88)90 768
Q 100.46(302 San)119.62 F(Francisco, June 20-24)2.5 E EP
%%Page: 303 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(McK)90 48 Q(usick, Karels)-.15 E
(Design of a General Purpose Memory ...)197.48 E/F1 10/Times-Italic@0 SF
(/*)92.011 84 Q 4.791(*M)94.791 96 S(acr)-4.791 E 4.791(ot)-.45 G 4.791
(oc)-4.791 G(on)-4.791 E 2.291(vert a size to a b)-.4 F(uc)-.2 E -.1(ke)
-.2 G 4.791(ti).1 G(nde)-4.791 E 2.291(x. If the size is constant,)-.2 F
4.791(*t)94.791 108 S 2.291(his macr)-4.791 F 4.791(or)-.45 G 2.291
(educes to a compile time constant.)-5.161 F 2.011(*/)94.791 120 S/F2 14
/Times-Italic@0 SF(MIN)425.148 132 Q(ALLOCSIZE)-.378 E/F3 10
/Times-Bold@0 SF -4.998(##)-432 G -5.558(dd)4.998 G -4.438(ee)5.558 G
3.906 -3.328(ff i)4.438 H(in).55 E(ne)-5.558 E(e)-4.438 E F0(MIN)4.791 E
43.305(ALLOCSIZE \(1)-.35 F 2.291(<< MINB)4.791 F(UCKET\))-.1 E F2 -.14
(BU)435.802 144 S(CKETINDX).14 E F3 -4.998(##)-432 G -5.558(dd)4.998 G
-4.438(ee)5.558 G 3.906 -3.328(ff i)4.438 H(in).55 E(ne)-5.558 E(e)
-4.438 E F0 -.1(BU)4.791 G 2.291(CKETINDX\(size\) \\).1 F 2.291
(\(size\) <= \(MIN)145 156 R(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291
(128\) \\)4.791 F 4.791(?\()195 168 S 2.291(size\) <= \(MIN)-4.791 F
(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291(8\) \\)4.791 F 4.791(?\()245 180
S 2.291(size\) <= \(MIN)-4.791 F(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291
(2\) \\)4.791 F 4.791(?\()295 192 S 2.291(size\) <= \(MIN)-4.791 F
(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291(1\) \\)4.791 F 4.791(?\()345 204
S(MINB)-4.791 E 2.291(UCKET + 0\) \\)-.1 F 4.791(:\()345 216 S(MINB)
-4.791 E 2.291(UCKET + 1\) \\)-.1 F 4.791(:\()295 228 S 2.291
(size\) <= \(MIN)-4.791 F(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291(4\) \\)
4.791 F 4.791(?\()345 240 S(MINB)-4.791 E 2.291(UCKET + 2\) \\)-.1 F
4.791(:\()345 252 S(MINB)-4.791 E 2.291(UCKET + 3\) \\)-.1 F 4.791(:\()
245 264 S 2.291(size\) <= \(MIN)-4.791 F(ALLOCSIZE)-.35 E F1(*)A F0
2.291(32\) \\)4.791 F 4.791(?\()295 276 S 2.291(size\) <= \(MIN)-4.791 F
(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291(16\) \\)4.791 F 4.791(?\()345
288 S(MINB)-4.791 E 2.291(UCKET + 4\) \\)-.1 F 4.791(:\()345 300 S(MINB)
-4.791 E 2.291(UCKET + 5\) \\)-.1 F 4.791(:\()295 312 S 2.291
(size\) <= \(MIN)-4.791 F(ALLOCSIZE)-.35 E F1(*)4.791 E F0 2.291
(64\) \\)4.791 F 4.791(?\()345 324 S(MINB)-4.791 E 2.291(UCKET + 6\) \\)
-.1 F 4.791(:\()345 336 S(MINB)-4.791 E 2.291(UCKET + 7\) \\)-.1 F 4.791
(:\()195 348 S 2.291(size\) <= \(MIN)-4.791 F(ALLOCSIZE)-.35 E F1(*)
4.791 E F0 2.291(2048\) \\)4.791 F F1 2.291(/* etc ... *)247.011 360 R
(/)2.011 E(/*)92.011 384 Q 4.791(*M)94.791 396 S(acr)-4.791 E 4.791(ov)
-.45 G(er)-4.791 E 2.291(sions for the usual cases of malloc)-.1 F(/fr)
2.011 E(ee)-.37 E 2.011(*/)94.791 408 S F2(MALLOC)466.77 420 Q F3 -4.998
(##)-432 G -5.558(dd)4.998 G -4.438(ee)5.558 G 3.906 -3.328(ff i)4.438 H
(in).55 E(ne)-5.558 E(e)-4.438 E F0 2.291
(MALLOC\(space, cast, size, flags\))4.791 F F3 -3.938({{)4.791 G F0(\\)
8.729 E F3 6.196 -4.438(rr ee)145 432 T -4.998(gg)4.438 G -2.778(ii)
4.998 G -3.888(ss)2.778 G -3.328(tt)3.888 G -4.438(ee)3.328 G 11.167
-4.438(rr s)4.438 H(st).55 E(tr)-3.328 E(ru)-4.438 E(uc)-5.558 E(ct)
-4.438 E(t)-3.328 E F0(kmemb)4.791 E(uck)-.2 E(ets)-.1 E F1(*)4.791 E F0
2.291(kbp = &b)B(uck)-.2 E(et[B)-.1 E 2.291(UCKETINDX\(size\)]; \\)-.1 F
F3 -2.778(ll)145 444 S -4.998(oo)2.778 G -5.558(nn)4.998 G -4.998(gg)
5.558 G F0 4.791(s=s)9.789 G 2.291(plimp\(\); \\)-4.791 F F3 -2.778(ii)
145 456 S -3.328(ff)2.778 G F0(\(kbp)8.119 E/F4 10/Symbol SF(-)A F0(>kb)
A F4(-)5 I F0(ne)-5 I 2.291(xt == NULL\))-.15 F F3 -3.938({{)4.791 G F0
(\\)8.729 E 2.291(\(space\) = \(cast\)malloc\(size, flags\); \\)195 468
R F3 10.167 -3.938(}} e)145 480 T(el)-.5 E(ls)-2.778 E(se)-3.888 E 4.791
(e{)-4.438 G({)-8.729 E F0(\\)4.791 E 2.291(\(space\) = \(cast\)kbp)195
492 R F4(-)A F0(>kb)A F4(-)5 I F0(ne)-5 I 2.291(xt; \\)-.15 F(kbp)195
504 Q F4(-)A F0(>kb)A F4(-)5 I F0(ne)-5 I 2.291(xt =)-.15 F F1(*)4.791 E
F0(\(caddr)A F4(-)5 I F0(t)-5 I F1(*)4.791 E F0 2.291(\)\(space\); \\)B
F3 -3.938(}})145 516 S F0(\\)8.729 E 2.291(splx\(s\); \\)145 528 R F3
-3.938(}})90 540 S F2(FREE)487.784 564 Q F3 -4.998(##)-432 G -5.558(dd)
4.998 G -4.438(ee)5.558 G 3.906 -3.328(ff i)4.438 H(in).55 E(ne)-5.558 E
(e)-4.438 E F0(FREE\(addr\))4.791 E F3 -3.938({{)4.791 G F0(\\)8.729 E
F3 6.196 -4.438(rr ee)145 576 T -4.998(gg)4.438 G -2.778(ii)4.998 G
-3.888(ss)2.778 G -3.328(tt)3.888 G -4.438(ee)3.328 G 11.167 -4.438
(rr s)4.438 H(st).55 E(tr)-3.328 E(ru)-4.438 E(uc)-5.558 E(ct)-4.438 E
(t)-3.328 E F0(kmemb)4.791 E(uck)-.2 E(ets)-.1 E F1(*)4.791 E F0 2.291
(kbp; \\)B F3 6.196 -4.438(rr ee)145 588 T -4.998(gg)4.438 G -2.778(ii)
4.998 G -3.888(ss)2.778 G -3.328(tt)3.888 G -4.438(ee)3.328 G 11.167
-4.438(rr s)4.438 H(st).55 E(tr)-3.328 E(ru)-4.438 E(uc)-5.558 E(ct)
-4.438 E(t)-3.328 E F0(kmemsizes)4.791 E F1(*)4.791 E F0 2.291(ksp = \\)
B(&kmemsizes[\(\(addr\))195 600 Q F4(-)4.791 E F0(kmembase\))4.791 E F1
(/)6.802 E F0 -1.06 -.92(PA G)4.791 H 2.291(ESIZE]; \\).92 F F3 -2.778
(ll)145 612 S -4.998(oo)2.778 G -5.558(nn)4.998 G -4.998(gg)5.558 G F0
4.791(s=s)9.789 G 2.291(plimp\(\); \\)-4.791 F F3 -2.778(ii)145 624 S
-3.328(ff)2.778 G F0 2.291(\(1 << ksp)8.119 F F4(-)A F0(>ks)A F4(-)5 I
F0 2.291(indx > MAXALLOCSA)-5 J(VE\))-1.35 E F3 -3.938({{)4.791 G F0(\\)
8.729 E 2.291(free\(addr\); \\)195 636 R F3 10.167 -3.938(}} e)145 648 T
(el)-.5 E(ls)-2.778 E(se)-3.888 E 4.791(e{)-4.438 G({)-8.729 E F0(\\)
4.791 E 2.291(kbp = &b)195 660 R(uck)-.2 E(et[ksp)-.1 E F4(-)A F0(>ks)A
F4(-)5 I F0 2.291(indx]; \\)-5 J F1(*)195 672 Q F0(\(caddr)A F4(-)5 I F0
(t)-5 I F1(*)4.791 E F0 2.291(\)\(addr\) = kbp)B F4(-)A F0(>kb)A F4(-)5
I F0(ne)-5 I 2.291(xt; \\)-.15 F(kbp)195 684 Q F4(-)A F0(>kb)A F4(-)5 I
F0(ne)-5 I 2.291(xt = \(caddr)-.15 F F4(-)5 I F0 2.291(t\)\(addr\); \\)
-5 J F3 -3.938(}})145 696 S F0(\\)8.729 E 2.291(splx\(s\); \\)145 708 R
F3 -3.938(}})90 720 S F0(Summer USENIX '88)90 768 Q 100.46(303 San)
119.62 F(Francisco, June 20-24)2.5 E EP
%%Page: 304 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Design of a General Purpose Memory ...)90 48 Q
(McK)197.48 E(usick, Karels)-.15 E(Summer USENIX '88)90 768 Q 100.46
(304 San)119.62 F(Francisco, June 20-24)2.5 E EP
%%Trailer
end
%%EOF
